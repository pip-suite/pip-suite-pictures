{"version":3,"sources":["../node_modules/browser-pack/_prelude.js","../node_modules/async/lib/async.js","../node_modules/process/browser.js","../node_modules/timers-browserify/main.js","src/add_image/AddImage.ts","src/add_image/AddImageOption.ts","src/add_image/AddImageResult.ts","src/avatar/Avatar.ts","src/avatar_edit/AvatarEdit.ts","src/camera_dialog/CameraDialogController.ts","src/camera_dialog/CameraDialogService.ts","src/camera_dialog/index.ts","src/collage/Collage.ts","src/data/Attachment.ts","src/data/AvatarDataService.ts","src/data/BlobInfo.ts","src/data/DataPage.ts","src/data/IAvatarDataService.ts","src/data/IPictureDataService.ts","src/data/Image.ts","src/data/ImageSet.ts","src/data/ImageSetDataService.ts","src/data/PictureDataService.ts","src/data/index.ts","src/gallery_search_dialog/GallerySearchDialogController.ts","src/gallery_search_dialog/GallerySearchDialogService.ts","src/gallery_search_dialog/IGallerySearchDialogService.ts","src/gallery_search_dialog/index.ts","src/index.ts","src/picture/Picture.ts","src/picture_edit/PictureEdit.ts","src/picture_list_edit/PictureListEdit.ts","src/picture_url_dialog/PictureUrlDialogController.ts","src/picture_url_dialog/PictureUrlDialogService.ts","src/picture_url_dialog/index.ts","src/rest/AvatarResources.ts","src/rest/ImageSetResources.ts","src/rest/PictureResources.ts","src/rest/index.ts","src/utilities/IPictureUtils.ts","src/utilities/PicturePaste.ts","src/utilities/PictureUtils.ts","src/utilities/index.ts","temp/pip-suite-pictures-html.min.js"],"names":[],"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","file":"pip-suite-pictures.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","/*!\n * async\n * https://github.com/caolan/async\n *\n * Copyright 2010-2014 Caolan McMahon\n * Released under the MIT license\n */\n(function () {\n\n    var async = {};\n    function noop() {}\n    function identity(v) {\n        return v;\n    }\n    function toBool(v) {\n        return !!v;\n    }\n    function notId(v) {\n        return !v;\n    }\n\n    // global on the server, window in the browser\n    var previous_async;\n\n    // Establish the root object, `window` (`self`) in the browser, `global`\n    // on the server, or `this` in some virtual machines. We use `self`\n    // instead of `window` for `WebWorker` support.\n    var root = typeof self === 'object' && self.self === self && self ||\n            typeof global === 'object' && global.global === global && global ||\n            this;\n\n    if (root != null) {\n        previous_async = root.async;\n    }\n\n    async.noConflict = function () {\n        root.async = previous_async;\n        return async;\n    };\n\n    function only_once(fn) {\n        return function() {\n            if (fn === null) throw new Error(\"Callback was already called.\");\n            fn.apply(this, arguments);\n            fn = null;\n        };\n    }\n\n    function _once(fn) {\n        return function() {\n            if (fn === null) return;\n            fn.apply(this, arguments);\n            fn = null;\n        };\n    }\n\n    //// cross-browser compatiblity functions ////\n\n    var _toString = Object.prototype.toString;\n\n    var _isArray = Array.isArray || function (obj) {\n        return _toString.call(obj) === '[object Array]';\n    };\n\n    // Ported from underscore.js isObject\n    var _isObject = function(obj) {\n        var type = typeof obj;\n        return type === 'function' || type === 'object' && !!obj;\n    };\n\n    function _isArrayLike(arr) {\n        return _isArray(arr) || (\n            // has a positive integer length property\n            typeof arr.length === \"number\" &&\n            arr.length >= 0 &&\n            arr.length % 1 === 0\n        );\n    }\n\n    function _arrayEach(arr, iterator) {\n        var index = -1,\n            length = arr.length;\n\n        while (++index < length) {\n            iterator(arr[index], index, arr);\n        }\n    }\n\n    function _map(arr, iterator) {\n        var index = -1,\n            length = arr.length,\n            result = Array(length);\n\n        while (++index < length) {\n            result[index] = iterator(arr[index], index, arr);\n        }\n        return result;\n    }\n\n    function _range(count) {\n        return _map(Array(count), function (v, i) { return i; });\n    }\n\n    function _reduce(arr, iterator, memo) {\n        _arrayEach(arr, function (x, i, a) {\n            memo = iterator(memo, x, i, a);\n        });\n        return memo;\n    }\n\n    function _forEachOf(object, iterator) {\n        _arrayEach(_keys(object), function (key) {\n            iterator(object[key], key);\n        });\n    }\n\n    function _indexOf(arr, item) {\n        for (var i = 0; i < arr.length; i++) {\n            if (arr[i] === item) return i;\n        }\n        return -1;\n    }\n\n    var _keys = Object.keys || function (obj) {\n        var keys = [];\n        for (var k in obj) {\n            if (obj.hasOwnProperty(k)) {\n                keys.push(k);\n            }\n        }\n        return keys;\n    };\n\n    function _keyIterator(coll) {\n        var i = -1;\n        var len;\n        var keys;\n        if (_isArrayLike(coll)) {\n            len = coll.length;\n            return function next() {\n                i++;\n                return i < len ? i : null;\n            };\n        } else {\n            keys = _keys(coll);\n            len = keys.length;\n            return function next() {\n                i++;\n                return i < len ? keys[i] : null;\n            };\n        }\n    }\n\n    // Similar to ES6's rest param (http://ariya.ofilabs.com/2013/03/es6-and-rest-parameter.html)\n    // This accumulates the arguments passed into an array, after a given index.\n    // From underscore.js (https://github.com/jashkenas/underscore/pull/2140).\n    function _restParam(func, startIndex) {\n        startIndex = startIndex == null ? func.length - 1 : +startIndex;\n        return function() {\n            var length = Math.max(arguments.length - startIndex, 0);\n            var rest = Array(length);\n            for (var index = 0; index < length; index++) {\n                rest[index] = arguments[index + startIndex];\n            }\n            switch (startIndex) {\n                case 0: return func.call(this, rest);\n                case 1: return func.call(this, arguments[0], rest);\n            }\n            // Currently unused but handle cases outside of the switch statement:\n            // var args = Array(startIndex + 1);\n            // for (index = 0; index < startIndex; index++) {\n            //     args[index] = arguments[index];\n            // }\n            // args[startIndex] = rest;\n            // return func.apply(this, args);\n        };\n    }\n\n    function _withoutIndex(iterator) {\n        return function (value, index, callback) {\n            return iterator(value, callback);\n        };\n    }\n\n    //// exported async module functions ////\n\n    //// nextTick implementation with browser-compatible fallback ////\n\n    // capture the global reference to guard against fakeTimer mocks\n    var _setImmediate = typeof setImmediate === 'function' && setImmediate;\n\n    var _delay = _setImmediate ? function(fn) {\n        // not a direct alias for IE10 compatibility\n        _setImmediate(fn);\n    } : function(fn) {\n        setTimeout(fn, 0);\n    };\n\n    if (typeof process === 'object' && typeof process.nextTick === 'function') {\n        async.nextTick = process.nextTick;\n    } else {\n        async.nextTick = _delay;\n    }\n    async.setImmediate = _setImmediate ? _delay : async.nextTick;\n\n\n    async.forEach =\n    async.each = function (arr, iterator, callback) {\n        return async.eachOf(arr, _withoutIndex(iterator), callback);\n    };\n\n    async.forEachSeries =\n    async.eachSeries = function (arr, iterator, callback) {\n        return async.eachOfSeries(arr, _withoutIndex(iterator), callback);\n    };\n\n\n    async.forEachLimit =\n    async.eachLimit = function (arr, limit, iterator, callback) {\n        return _eachOfLimit(limit)(arr, _withoutIndex(iterator), callback);\n    };\n\n    async.forEachOf =\n    async.eachOf = function (object, iterator, callback) {\n        callback = _once(callback || noop);\n        object = object || [];\n\n        var iter = _keyIterator(object);\n        var key, completed = 0;\n\n        while ((key = iter()) != null) {\n            completed += 1;\n            iterator(object[key], key, only_once(done));\n        }\n\n        if (completed === 0) callback(null);\n\n        function done(err) {\n            completed--;\n            if (err) {\n                callback(err);\n            }\n            // Check key is null in case iterator isn't exhausted\n            // and done resolved synchronously.\n            else if (key === null && completed <= 0) {\n                callback(null);\n            }\n        }\n    };\n\n    async.forEachOfSeries =\n    async.eachOfSeries = function (obj, iterator, callback) {\n        callback = _once(callback || noop);\n        obj = obj || [];\n        var nextKey = _keyIterator(obj);\n        var key = nextKey();\n        function iterate() {\n            var sync = true;\n            if (key === null) {\n                return callback(null);\n            }\n            iterator(obj[key], key, only_once(function (err) {\n                if (err) {\n                    callback(err);\n                }\n                else {\n                    key = nextKey();\n                    if (key === null) {\n                        return callback(null);\n                    } else {\n                        if (sync) {\n                            async.setImmediate(iterate);\n                        } else {\n                            iterate();\n                        }\n                    }\n                }\n            }));\n            sync = false;\n        }\n        iterate();\n    };\n\n\n\n    async.forEachOfLimit =\n    async.eachOfLimit = function (obj, limit, iterator, callback) {\n        _eachOfLimit(limit)(obj, iterator, callback);\n    };\n\n    function _eachOfLimit(limit) {\n\n        return function (obj, iterator, callback) {\n            callback = _once(callback || noop);\n            obj = obj || [];\n            var nextKey = _keyIterator(obj);\n            if (limit <= 0) {\n                return callback(null);\n            }\n            var done = false;\n            var running = 0;\n            var errored = false;\n\n            (function replenish () {\n                if (done && running <= 0) {\n                    return callback(null);\n                }\n\n                while (running < limit && !errored) {\n                    var key = nextKey();\n                    if (key === null) {\n                        done = true;\n                        if (running <= 0) {\n                            callback(null);\n                        }\n                        return;\n                    }\n                    running += 1;\n                    iterator(obj[key], key, only_once(function (err) {\n                        running -= 1;\n                        if (err) {\n                            callback(err);\n                            errored = true;\n                        }\n                        else {\n                            replenish();\n                        }\n                    }));\n                }\n            })();\n        };\n    }\n\n\n    function doParallel(fn) {\n        return function (obj, iterator, callback) {\n            return fn(async.eachOf, obj, iterator, callback);\n        };\n    }\n    function doParallelLimit(fn) {\n        return function (obj, limit, iterator, callback) {\n            return fn(_eachOfLimit(limit), obj, iterator, callback);\n        };\n    }\n    function doSeries(fn) {\n        return function (obj, iterator, callback) {\n            return fn(async.eachOfSeries, obj, iterator, callback);\n        };\n    }\n\n    function _asyncMap(eachfn, arr, iterator, callback) {\n        callback = _once(callback || noop);\n        arr = arr || [];\n        var results = _isArrayLike(arr) ? [] : {};\n        eachfn(arr, function (value, index, callback) {\n            iterator(value, function (err, v) {\n                results[index] = v;\n                callback(err);\n            });\n        }, function (err) {\n            callback(err, results);\n        });\n    }\n\n    async.map = doParallel(_asyncMap);\n    async.mapSeries = doSeries(_asyncMap);\n    async.mapLimit = doParallelLimit(_asyncMap);\n\n    // reduce only has a series version, as doing reduce in parallel won't\n    // work in many situations.\n    async.inject =\n    async.foldl =\n    async.reduce = function (arr, memo, iterator, callback) {\n        async.eachOfSeries(arr, function (x, i, callback) {\n            iterator(memo, x, function (err, v) {\n                memo = v;\n                callback(err);\n            });\n        }, function (err) {\n            callback(err, memo);\n        });\n    };\n\n    async.foldr =\n    async.reduceRight = function (arr, memo, iterator, callback) {\n        var reversed = _map(arr, identity).reverse();\n        async.reduce(reversed, memo, iterator, callback);\n    };\n\n    async.transform = function (arr, memo, iterator, callback) {\n        if (arguments.length === 3) {\n            callback = iterator;\n            iterator = memo;\n            memo = _isArray(arr) ? [] : {};\n        }\n\n        async.eachOf(arr, function(v, k, cb) {\n            iterator(memo, v, k, cb);\n        }, function(err) {\n            callback(err, memo);\n        });\n    };\n\n    function _filter(eachfn, arr, iterator, callback) {\n        var results = [];\n        eachfn(arr, function (x, index, callback) {\n            iterator(x, function (v) {\n                if (v) {\n                    results.push({index: index, value: x});\n                }\n                callback();\n            });\n        }, function () {\n            callback(_map(results.sort(function (a, b) {\n                return a.index - b.index;\n            }), function (x) {\n                return x.value;\n            }));\n        });\n    }\n\n    async.select =\n    async.filter = doParallel(_filter);\n\n    async.selectLimit =\n    async.filterLimit = doParallelLimit(_filter);\n\n    async.selectSeries =\n    async.filterSeries = doSeries(_filter);\n\n    function _reject(eachfn, arr, iterator, callback) {\n        _filter(eachfn, arr, function(value, cb) {\n            iterator(value, function(v) {\n                cb(!v);\n            });\n        }, callback);\n    }\n    async.reject = doParallel(_reject);\n    async.rejectLimit = doParallelLimit(_reject);\n    async.rejectSeries = doSeries(_reject);\n\n    function _createTester(eachfn, check, getResult) {\n        return function(arr, limit, iterator, cb) {\n            function done() {\n                if (cb) cb(getResult(false, void 0));\n            }\n            function iteratee(x, _, callback) {\n                if (!cb) return callback();\n                iterator(x, function (v) {\n                    if (cb && check(v)) {\n                        cb(getResult(true, x));\n                        cb = iterator = false;\n                    }\n                    callback();\n                });\n            }\n            if (arguments.length > 3) {\n                eachfn(arr, limit, iteratee, done);\n            } else {\n                cb = iterator;\n                iterator = limit;\n                eachfn(arr, iteratee, done);\n            }\n        };\n    }\n\n    async.any =\n    async.some = _createTester(async.eachOf, toBool, identity);\n\n    async.someLimit = _createTester(async.eachOfLimit, toBool, identity);\n\n    async.all =\n    async.every = _createTester(async.eachOf, notId, notId);\n\n    async.everyLimit = _createTester(async.eachOfLimit, notId, notId);\n\n    function _findGetResult(v, x) {\n        return x;\n    }\n    async.detect = _createTester(async.eachOf, identity, _findGetResult);\n    async.detectSeries = _createTester(async.eachOfSeries, identity, _findGetResult);\n    async.detectLimit = _createTester(async.eachOfLimit, identity, _findGetResult);\n\n    async.sortBy = function (arr, iterator, callback) {\n        async.map(arr, function (x, callback) {\n            iterator(x, function (err, criteria) {\n                if (err) {\n                    callback(err);\n                }\n                else {\n                    callback(null, {value: x, criteria: criteria});\n                }\n            });\n        }, function (err, results) {\n            if (err) {\n                return callback(err);\n            }\n            else {\n                callback(null, _map(results.sort(comparator), function (x) {\n                    return x.value;\n                }));\n            }\n\n        });\n\n        function comparator(left, right) {\n            var a = left.criteria, b = right.criteria;\n            return a < b ? -1 : a > b ? 1 : 0;\n        }\n    };\n\n    async.auto = function (tasks, concurrency, callback) {\n        if (typeof arguments[1] === 'function') {\n            // concurrency is optional, shift the args.\n            callback = concurrency;\n            concurrency = null;\n        }\n        callback = _once(callback || noop);\n        var keys = _keys(tasks);\n        var remainingTasks = keys.length;\n        if (!remainingTasks) {\n            return callback(null);\n        }\n        if (!concurrency) {\n            concurrency = remainingTasks;\n        }\n\n        var results = {};\n        var runningTasks = 0;\n\n        var hasError = false;\n\n        var listeners = [];\n        function addListener(fn) {\n            listeners.unshift(fn);\n        }\n        function removeListener(fn) {\n            var idx = _indexOf(listeners, fn);\n            if (idx >= 0) listeners.splice(idx, 1);\n        }\n        function taskComplete() {\n            remainingTasks--;\n            _arrayEach(listeners.slice(0), function (fn) {\n                fn();\n            });\n        }\n\n        addListener(function () {\n            if (!remainingTasks) {\n                callback(null, results);\n            }\n        });\n\n        _arrayEach(keys, function (k) {\n            if (hasError) return;\n            var task = _isArray(tasks[k]) ? tasks[k]: [tasks[k]];\n            var taskCallback = _restParam(function(err, args) {\n                runningTasks--;\n                if (args.length <= 1) {\n                    args = args[0];\n                }\n                if (err) {\n                    var safeResults = {};\n                    _forEachOf(results, function(val, rkey) {\n                        safeResults[rkey] = val;\n                    });\n                    safeResults[k] = args;\n                    hasError = true;\n\n                    callback(err, safeResults);\n                }\n                else {\n                    results[k] = args;\n                    async.setImmediate(taskComplete);\n                }\n            });\n            var requires = task.slice(0, task.length - 1);\n            // prevent dead-locks\n            var len = requires.length;\n            var dep;\n            while (len--) {\n                if (!(dep = tasks[requires[len]])) {\n                    throw new Error('Has nonexistent dependency in ' + requires.join(', '));\n                }\n                if (_isArray(dep) && _indexOf(dep, k) >= 0) {\n                    throw new Error('Has cyclic dependencies');\n                }\n            }\n            function ready() {\n                return runningTasks < concurrency && _reduce(requires, function (a, x) {\n                    return (a && results.hasOwnProperty(x));\n                }, true) && !results.hasOwnProperty(k);\n            }\n            if (ready()) {\n                runningTasks++;\n                task[task.length - 1](taskCallback, results);\n            }\n            else {\n                addListener(listener);\n            }\n            function listener() {\n                if (ready()) {\n                    runningTasks++;\n                    removeListener(listener);\n                    task[task.length - 1](taskCallback, results);\n                }\n            }\n        });\n    };\n\n\n\n    async.retry = function(times, task, callback) {\n        var DEFAULT_TIMES = 5;\n        var DEFAULT_INTERVAL = 0;\n\n        var attempts = [];\n\n        var opts = {\n            times: DEFAULT_TIMES,\n            interval: DEFAULT_INTERVAL\n        };\n\n        function parseTimes(acc, t){\n            if(typeof t === 'number'){\n                acc.times = parseInt(t, 10) || DEFAULT_TIMES;\n            } else if(typeof t === 'object'){\n                acc.times = parseInt(t.times, 10) || DEFAULT_TIMES;\n                acc.interval = parseInt(t.interval, 10) || DEFAULT_INTERVAL;\n            } else {\n                throw new Error('Unsupported argument type for \\'times\\': ' + typeof t);\n            }\n        }\n\n        var length = arguments.length;\n        if (length < 1 || length > 3) {\n            throw new Error('Invalid arguments - must be either (task), (task, callback), (times, task) or (times, task, callback)');\n        } else if (length <= 2 && typeof times === 'function') {\n            callback = task;\n            task = times;\n        }\n        if (typeof times !== 'function') {\n            parseTimes(opts, times);\n        }\n        opts.callback = callback;\n        opts.task = task;\n\n        function wrappedTask(wrappedCallback, wrappedResults) {\n            function retryAttempt(task, finalAttempt) {\n                return function(seriesCallback) {\n                    task(function(err, result){\n                        seriesCallback(!err || finalAttempt, {err: err, result: result});\n                    }, wrappedResults);\n                };\n            }\n\n            function retryInterval(interval){\n                return function(seriesCallback){\n                    setTimeout(function(){\n                        seriesCallback(null);\n                    }, interval);\n                };\n            }\n\n            while (opts.times) {\n\n                var finalAttempt = !(opts.times-=1);\n                attempts.push(retryAttempt(opts.task, finalAttempt));\n                if(!finalAttempt && opts.interval > 0){\n                    attempts.push(retryInterval(opts.interval));\n                }\n            }\n\n            async.series(attempts, function(done, data){\n                data = data[data.length - 1];\n                (wrappedCallback || opts.callback)(data.err, data.result);\n            });\n        }\n\n        // If a callback is passed, run this as a controll flow\n        return opts.callback ? wrappedTask() : wrappedTask;\n    };\n\n    async.waterfall = function (tasks, callback) {\n        callback = _once(callback || noop);\n        if (!_isArray(tasks)) {\n            var err = new Error('First argument to waterfall must be an array of functions');\n            return callback(err);\n        }\n        if (!tasks.length) {\n            return callback();\n        }\n        function wrapIterator(iterator) {\n            return _restParam(function (err, args) {\n                if (err) {\n                    callback.apply(null, [err].concat(args));\n                }\n                else {\n                    var next = iterator.next();\n                    if (next) {\n                        args.push(wrapIterator(next));\n                    }\n                    else {\n                        args.push(callback);\n                    }\n                    ensureAsync(iterator).apply(null, args);\n                }\n            });\n        }\n        wrapIterator(async.iterator(tasks))();\n    };\n\n    function _parallel(eachfn, tasks, callback) {\n        callback = callback || noop;\n        var results = _isArrayLike(tasks) ? [] : {};\n\n        eachfn(tasks, function (task, key, callback) {\n            task(_restParam(function (err, args) {\n                if (args.length <= 1) {\n                    args = args[0];\n                }\n                results[key] = args;\n                callback(err);\n            }));\n        }, function (err) {\n            callback(err, results);\n        });\n    }\n\n    async.parallel = function (tasks, callback) {\n        _parallel(async.eachOf, tasks, callback);\n    };\n\n    async.parallelLimit = function(tasks, limit, callback) {\n        _parallel(_eachOfLimit(limit), tasks, callback);\n    };\n\n    async.series = function(tasks, callback) {\n        _parallel(async.eachOfSeries, tasks, callback);\n    };\n\n    async.iterator = function (tasks) {\n        function makeCallback(index) {\n            function fn() {\n                if (tasks.length) {\n                    tasks[index].apply(null, arguments);\n                }\n                return fn.next();\n            }\n            fn.next = function () {\n                return (index < tasks.length - 1) ? makeCallback(index + 1): null;\n            };\n            return fn;\n        }\n        return makeCallback(0);\n    };\n\n    async.apply = _restParam(function (fn, args) {\n        return _restParam(function (callArgs) {\n            return fn.apply(\n                null, args.concat(callArgs)\n            );\n        });\n    });\n\n    function _concat(eachfn, arr, fn, callback) {\n        var result = [];\n        eachfn(arr, function (x, index, cb) {\n            fn(x, function (err, y) {\n                result = result.concat(y || []);\n                cb(err);\n            });\n        }, function (err) {\n            callback(err, result);\n        });\n    }\n    async.concat = doParallel(_concat);\n    async.concatSeries = doSeries(_concat);\n\n    async.whilst = function (test, iterator, callback) {\n        callback = callback || noop;\n        if (test()) {\n            var next = _restParam(function(err, args) {\n                if (err) {\n                    callback(err);\n                } else if (test.apply(this, args)) {\n                    iterator(next);\n                } else {\n                    callback.apply(null, [null].concat(args));\n                }\n            });\n            iterator(next);\n        } else {\n            callback(null);\n        }\n    };\n\n    async.doWhilst = function (iterator, test, callback) {\n        var calls = 0;\n        return async.whilst(function() {\n            return ++calls <= 1 || test.apply(this, arguments);\n        }, iterator, callback);\n    };\n\n    async.until = function (test, iterator, callback) {\n        return async.whilst(function() {\n            return !test.apply(this, arguments);\n        }, iterator, callback);\n    };\n\n    async.doUntil = function (iterator, test, callback) {\n        return async.doWhilst(iterator, function() {\n            return !test.apply(this, arguments);\n        }, callback);\n    };\n\n    async.during = function (test, iterator, callback) {\n        callback = callback || noop;\n\n        var next = _restParam(function(err, args) {\n            if (err) {\n                callback(err);\n            } else {\n                args.push(check);\n                test.apply(this, args);\n            }\n        });\n\n        var check = function(err, truth) {\n            if (err) {\n                callback(err);\n            } else if (truth) {\n                iterator(next);\n            } else {\n                callback(null);\n            }\n        };\n\n        test(check);\n    };\n\n    async.doDuring = function (iterator, test, callback) {\n        var calls = 0;\n        async.during(function(next) {\n            if (calls++ < 1) {\n                next(null, true);\n            } else {\n                test.apply(this, arguments);\n            }\n        }, iterator, callback);\n    };\n\n    function _queue(worker, concurrency, payload) {\n        if (concurrency == null) {\n            concurrency = 1;\n        }\n        else if(concurrency === 0) {\n            throw new Error('Concurrency must not be zero');\n        }\n        function _insert(q, data, pos, callback) {\n            if (callback != null && typeof callback !== \"function\") {\n                throw new Error(\"task callback must be a function\");\n            }\n            q.started = true;\n            if (!_isArray(data)) {\n                data = [data];\n            }\n            if(data.length === 0 && q.idle()) {\n                // call drain immediately if there are no tasks\n                return async.setImmediate(function() {\n                    q.drain();\n                });\n            }\n            _arrayEach(data, function(task) {\n                var item = {\n                    data: task,\n                    callback: callback || noop\n                };\n\n                if (pos) {\n                    q.tasks.unshift(item);\n                } else {\n                    q.tasks.push(item);\n                }\n\n                if (q.tasks.length === q.concurrency) {\n                    q.saturated();\n                }\n            });\n            async.setImmediate(q.process);\n        }\n        function _next(q, tasks) {\n            return function(){\n                workers -= 1;\n\n                var removed = false;\n                var args = arguments;\n                _arrayEach(tasks, function (task) {\n                    _arrayEach(workersList, function (worker, index) {\n                        if (worker === task && !removed) {\n                            workersList.splice(index, 1);\n                            removed = true;\n                        }\n                    });\n\n                    task.callback.apply(task, args);\n                });\n                if (q.tasks.length + workers === 0) {\n                    q.drain();\n                }\n                q.process();\n            };\n        }\n\n        var workers = 0;\n        var workersList = [];\n        var q = {\n            tasks: [],\n            concurrency: concurrency,\n            payload: payload,\n            saturated: noop,\n            empty: noop,\n            drain: noop,\n            started: false,\n            paused: false,\n            push: function (data, callback) {\n                _insert(q, data, false, callback);\n            },\n            kill: function () {\n                q.drain = noop;\n                q.tasks = [];\n            },\n            unshift: function (data, callback) {\n                _insert(q, data, true, callback);\n            },\n            process: function () {\n                while(!q.paused && workers < q.concurrency && q.tasks.length){\n\n                    var tasks = q.payload ?\n                        q.tasks.splice(0, q.payload) :\n                        q.tasks.splice(0, q.tasks.length);\n\n                    var data = _map(tasks, function (task) {\n                        return task.data;\n                    });\n\n                    if (q.tasks.length === 0) {\n                        q.empty();\n                    }\n                    workers += 1;\n                    workersList.push(tasks[0]);\n                    var cb = only_once(_next(q, tasks));\n                    worker(data, cb);\n                }\n            },\n            length: function () {\n                return q.tasks.length;\n            },\n            running: function () {\n                return workers;\n            },\n            workersList: function () {\n                return workersList;\n            },\n            idle: function() {\n                return q.tasks.length + workers === 0;\n            },\n            pause: function () {\n                q.paused = true;\n            },\n            resume: function () {\n                if (q.paused === false) { return; }\n                q.paused = false;\n                var resumeCount = Math.min(q.concurrency, q.tasks.length);\n                // Need to call q.process once per concurrent\n                // worker to preserve full concurrency after pause\n                for (var w = 1; w <= resumeCount; w++) {\n                    async.setImmediate(q.process);\n                }\n            }\n        };\n        return q;\n    }\n\n    async.queue = function (worker, concurrency) {\n        var q = _queue(function (items, cb) {\n            worker(items[0], cb);\n        }, concurrency, 1);\n\n        return q;\n    };\n\n    async.priorityQueue = function (worker, concurrency) {\n\n        function _compareTasks(a, b){\n            return a.priority - b.priority;\n        }\n\n        function _binarySearch(sequence, item, compare) {\n            var beg = -1,\n                end = sequence.length - 1;\n            while (beg < end) {\n                var mid = beg + ((end - beg + 1) >>> 1);\n                if (compare(item, sequence[mid]) >= 0) {\n                    beg = mid;\n                } else {\n                    end = mid - 1;\n                }\n            }\n            return beg;\n        }\n\n        function _insert(q, data, priority, callback) {\n            if (callback != null && typeof callback !== \"function\") {\n                throw new Error(\"task callback must be a function\");\n            }\n            q.started = true;\n            if (!_isArray(data)) {\n                data = [data];\n            }\n            if(data.length === 0) {\n                // call drain immediately if there are no tasks\n                return async.setImmediate(function() {\n                    q.drain();\n                });\n            }\n            _arrayEach(data, function(task) {\n                var item = {\n                    data: task,\n                    priority: priority,\n                    callback: typeof callback === 'function' ? callback : noop\n                };\n\n                q.tasks.splice(_binarySearch(q.tasks, item, _compareTasks) + 1, 0, item);\n\n                if (q.tasks.length === q.concurrency) {\n                    q.saturated();\n                }\n                async.setImmediate(q.process);\n            });\n        }\n\n        // Start with a normal queue\n        var q = async.queue(worker, concurrency);\n\n        // Override push to accept second parameter representing priority\n        q.push = function (data, priority, callback) {\n            _insert(q, data, priority, callback);\n        };\n\n        // Remove unshift function\n        delete q.unshift;\n\n        return q;\n    };\n\n    async.cargo = function (worker, payload) {\n        return _queue(worker, 1, payload);\n    };\n\n    function _console_fn(name) {\n        return _restParam(function (fn, args) {\n            fn.apply(null, args.concat([_restParam(function (err, args) {\n                if (typeof console === 'object') {\n                    if (err) {\n                        if (console.error) {\n                            console.error(err);\n                        }\n                    }\n                    else if (console[name]) {\n                        _arrayEach(args, function (x) {\n                            console[name](x);\n                        });\n                    }\n                }\n            })]));\n        });\n    }\n    async.log = _console_fn('log');\n    async.dir = _console_fn('dir');\n    /*async.info = _console_fn('info');\n    async.warn = _console_fn('warn');\n    async.error = _console_fn('error');*/\n\n    async.memoize = function (fn, hasher) {\n        var memo = {};\n        var queues = {};\n        var has = Object.prototype.hasOwnProperty;\n        hasher = hasher || identity;\n        var memoized = _restParam(function memoized(args) {\n            var callback = args.pop();\n            var key = hasher.apply(null, args);\n            if (has.call(memo, key)) {   \n                async.setImmediate(function () {\n                    callback.apply(null, memo[key]);\n                });\n            }\n            else if (has.call(queues, key)) {\n                queues[key].push(callback);\n            }\n            else {\n                queues[key] = [callback];\n                fn.apply(null, args.concat([_restParam(function (args) {\n                    memo[key] = args;\n                    var q = queues[key];\n                    delete queues[key];\n                    for (var i = 0, l = q.length; i < l; i++) {\n                        q[i].apply(null, args);\n                    }\n                })]));\n            }\n        });\n        memoized.memo = memo;\n        memoized.unmemoized = fn;\n        return memoized;\n    };\n\n    async.unmemoize = function (fn) {\n        return function () {\n            return (fn.unmemoized || fn).apply(null, arguments);\n        };\n    };\n\n    function _times(mapper) {\n        return function (count, iterator, callback) {\n            mapper(_range(count), iterator, callback);\n        };\n    }\n\n    async.times = _times(async.map);\n    async.timesSeries = _times(async.mapSeries);\n    async.timesLimit = function (count, limit, iterator, callback) {\n        return async.mapLimit(_range(count), limit, iterator, callback);\n    };\n\n    async.seq = function (/* functions... */) {\n        var fns = arguments;\n        return _restParam(function (args) {\n            var that = this;\n\n            var callback = args[args.length - 1];\n            if (typeof callback == 'function') {\n                args.pop();\n            } else {\n                callback = noop;\n            }\n\n            async.reduce(fns, args, function (newargs, fn, cb) {\n                fn.apply(that, newargs.concat([_restParam(function (err, nextargs) {\n                    cb(err, nextargs);\n                })]));\n            },\n            function (err, results) {\n                callback.apply(that, [err].concat(results));\n            });\n        });\n    };\n\n    async.compose = function (/* functions... */) {\n        return async.seq.apply(null, Array.prototype.reverse.call(arguments));\n    };\n\n\n    function _applyEach(eachfn) {\n        return _restParam(function(fns, args) {\n            var go = _restParam(function(args) {\n                var that = this;\n                var callback = args.pop();\n                return eachfn(fns, function (fn, _, cb) {\n                    fn.apply(that, args.concat([cb]));\n                },\n                callback);\n            });\n            if (args.length) {\n                return go.apply(this, args);\n            }\n            else {\n                return go;\n            }\n        });\n    }\n\n    async.applyEach = _applyEach(async.eachOf);\n    async.applyEachSeries = _applyEach(async.eachOfSeries);\n\n\n    async.forever = function (fn, callback) {\n        var done = only_once(callback || noop);\n        var task = ensureAsync(fn);\n        function next(err) {\n            if (err) {\n                return done(err);\n            }\n            task(next);\n        }\n        next();\n    };\n\n    function ensureAsync(fn) {\n        return _restParam(function (args) {\n            var callback = args.pop();\n            args.push(function () {\n                var innerArgs = arguments;\n                if (sync) {\n                    async.setImmediate(function () {\n                        callback.apply(null, innerArgs);\n                    });\n                } else {\n                    callback.apply(null, innerArgs);\n                }\n            });\n            var sync = true;\n            fn.apply(this, args);\n            sync = false;\n        });\n    }\n\n    async.ensureAsync = ensureAsync;\n\n    async.constant = _restParam(function(values) {\n        var args = [null].concat(values);\n        return function (callback) {\n            return callback.apply(this, args);\n        };\n    });\n\n    async.wrapSync =\n    async.asyncify = function asyncify(func) {\n        return _restParam(function (args) {\n            var callback = args.pop();\n            var result;\n            try {\n                result = func.apply(this, args);\n            } catch (e) {\n                return callback(e);\n            }\n            // if result is Promise object\n            if (_isObject(result) && typeof result.then === \"function\") {\n                result.then(function(value) {\n                    callback(null, value);\n                })[\"catch\"](function(err) {\n                    callback(err.message ? err : new Error(err));\n                });\n            } else {\n                callback(null, result);\n            }\n        });\n    };\n\n    // Node.js\n    if (typeof module === 'object' && module.exports) {\n        module.exports = async;\n    }\n    // AMD / RequireJS\n    else if (typeof define === 'function' && define.amd) {\n        define([], function () {\n            return async;\n        });\n    }\n    // included directly via <script> tag\n    else {\n        root.async = async;\n    }\n\n}());\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","var nextTick = require('process/browser.js').nextTick;\nvar apply = Function.prototype.apply;\nvar slice = Array.prototype.slice;\nvar immediateIds = {};\nvar nextImmediateId = 0;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) { timeout.close(); };\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(window, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// That's not how node.js implements it but the exposed api is the same.\nexports.setImmediate = typeof setImmediate === \"function\" ? setImmediate : function(fn) {\n  var id = nextImmediateId++;\n  var args = arguments.length < 2 ? false : slice.call(arguments, 1);\n\n  immediateIds[id] = true;\n\n  nextTick(function onNextTick() {\n    if (immediateIds[id]) {\n      // fn.call() is faster so we optimize for the common use-case\n      // @see http://jsperf.com/call-apply-segu\n      if (args) {\n        fn.apply(null, args);\n      } else {\n        fn.call(null);\n      }\n      // Prevent ids from leaking\n      exports.clearImmediate(id);\n    }\n  });\n\n  return id;\n};\n\nexports.clearImmediate = typeof clearImmediate === \"function\" ? clearImmediate : function(id) {\n  delete immediateIds[id];\n};","import { AddImageOption } from './AddImageOption';\nimport { Attachment } from '../data';\nimport { AddImageResult } from './AddImageResult';\n\n// Todo: Is this public exist anywhere?\ndeclare let unescape: any;\n\nconst ConfigTranslations = (pipTranslateProvider: pip.services.ITranslateProvider) => {\n    pipTranslateProvider.translations('en', {\n        'FILE': 'Upload pictures',\n        'WEB_LINK': 'Use web link',\n        'CAMERA': 'Take photo',\n        'IMAGE_GALLERY': 'Use image library',\n    });\n    pipTranslateProvider.translations('ru', {\n        'FILE': 'Загрузить картинку',\n        'WEB_LINK': 'Вставить веб ссылка',\n        'CAMERA': 'Использовать камеру',\n        'IMAGE_GALLERY': 'Открыть галерею изображений'\n    });\n}\n\n{\n    interface IAddImageScope extends angular.IScope {\n        $images: AddImageResult[];\n        onChange: any;\n        multi: any;\n        option: any;\n        ngDisabled: any;\n    }\n\n    class AddImageController {\n        public option: AddImageOption;\n\n        constructor(\n            private $scope: IAddImageScope,\n            private $element,\n            private $mdMenu,\n            private $timeout,\n            private pipCameraDialog,\n            private pipPictureUrlDialog,\n            private pipGallerySearchDialog\n        ) {\n            \"ngInject\";\n\n            let defaultOption = new AddImageOption();\n\n            this.option = _.assign(defaultOption, this.$scope.option);\n        }\n\n        public openMenu($mdOpenMenu): void {\n            if (this.$scope.ngDisabled()) {\n                return;\n            }\n\n            $mdOpenMenu();\n        }\n\n        private toBoolean(value: any): boolean {\n            if (!value) { return false; }\n\n            value = value.toString().toLowerCase();\n\n            return value == '1' || value == 'true';\n        }\n\n        public isMulti(): boolean {\n            if (this.$scope.multi !== undefined && this.$scope.multi !== null) {\n                if (angular.isFunction(this.$scope.multi)) {\n                    return this.toBoolean(this.$scope.multi());\n                } else {\n                    return this.toBoolean(this.$scope.multi);\n                }\n            } else {\n                return true;\n            }\n        }\n\n        public hideMenu(): void {\n            this.$mdMenu.hide();\n        }\n\n        public dataURItoBlob(dataURI: string): Blob {\n            let byteString;\n\n            if (dataURI.split(',')[0].indexOf('base64') >= 0) {\n                byteString = atob(dataURI.split(',')[1]);\n            } else {\n                byteString = unescape(dataURI.split(',')[1]);\n            }\n            let mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];\n\n            let ia = new Uint8Array(byteString.length);\n            let i: number;\n            for (i = 0; i < byteString.length; i++) {\n                ia[i] = byteString.charCodeAt(i);\n            }\n\n            return new Blob([ia], { type: mimeString });\n        }\n\n        public addImages(images: any): void {\n            if (images === undefined) { return; }\n\n            if (angular.isArray(images)) {\n                images.forEach((img: AddImageResult) => {\n                    if (this.$scope.onChange) {\n                        this.$scope.onChange(img);\n                    }\n                });\n            } else {\n                if (this.$scope.onChange) {\n                    this.$scope.onChange(images);\n                }\n            }\n\n            if (this.$scope.$images === undefined || !Array.isArray(this.$scope.$images)) {\n                return;\n            }\n\n            if (Array.isArray(images)) {\n                images.forEach((img) => {\n                    this.$scope.$images.push(img);\n                });\n            } else {\n                this.$scope.$images.push(images);\n            }\n        }\n\n        // Process user actions\n        public onFileChange($files: any): void {\n            if ($files == null || $files.length == 0) { return; }\n\n            $files.forEach((file) => {\n                if (file.type.indexOf('image') > -1) {\n                    this.$timeout(() => {\n                        let fileReader = new FileReader();\n                        fileReader.readAsDataURL(file);\n                        fileReader.onload = (e) => {\n                            this.$timeout(() => {\n                                this.addImages({ url: null, uriData: (e.target as any).result, file: file, picture: null });\n                            });\n                        }\n                    });\n                }\n            });\n\n        }\n\n        public onWebLinkClick(): void {\n            this.pipPictureUrlDialog.show((result) => {\n                let blob = null;\n                if (result.substring(0, 10) == 'data:image') {\n                    blob = this.dataURItoBlob(result);\n                    blob.name = result.slice(result.lastIndexOf('/') + 1, result.length).split('?')[0];\n                }\n                this.addImages({ url: result, uriData: null, file: blob, picture: null });\n            });\n        }\n\n        public onCameraClick(): void {\n            this.pipCameraDialog.show((result) => {\n                let blob: any = this.dataURItoBlob(result);\n                blob.name = 'camera';\n                this.addImages({ url: null, uriData: result, file: blob, picture: null });\n            });\n        }\n\n        public onGalleryClick(): void {\n            this.pipGallerySearchDialog.show(\n                {\n                    multiple: this.isMulti()\n                },\n                (result: Attachment[]) => {\n                    if (this.isMulti()) {\n                        let imgs: AddImageResult[] = [];\n                        result.forEach((item: Attachment) => {\n                            imgs.push({ url: null, uriData: null, file: null,  picture: item });\n                        });\n                        this.addImages(imgs);\n                    } else {\n                        this.addImages({ url: null, uriData: null, file: null, picture: result[0] });\n                    }\n                }\n            );\n        }\n    }\n\n    const AddImage = function (): ng.IDirective {\n        return {\n            restrict: 'AC',\n            scope: {\n                $images: '=pipImages',\n                onChange: '&pipChanged',\n                multi: '&pipMulti',\n                option: '=pipOption',\n                ngDisabled: '&'\n            },\n            transclude: true,\n            templateUrl: 'add_image/AddImage.html',\n            controller: AddImageController,\n            controllerAs: 'vm'\n        };\n    }\n\n    angular\n        .module('pipAddImage', ['pipCameraDialog', 'pipPictureUrlDialog', 'pipGallerySearchDialog', 'angularFileUpload'])\n        .config(ConfigTranslations)\n        .directive('pipAddImage', AddImage);\n}\n","export class AddImageOption {\n    public Upload: boolean = true;\n    public WebLink: boolean = true;\n    public Camera: boolean = true;\n    public Galery: boolean = true;\n}","import { Attachment } from '../data';\n\nexport class AddImageResult {\n    public picture?: Attachment;\n    public file?: any;\n    public uriData?: any;\n    public url?: string;\n}","import { IPictureUtilsService } from '../utilities/IPictureUtils';\nimport { IAvatarDataService, colors, colorClasses } from '../data/IAvatarDataService';\nimport { ReloadAvatar } from '../avatar_edit/AvatarEdit';\n\n{\n    interface IAvatarBindings {\n        [key: string]: any;\n\n        pipId: any;\n        pipUrl: any;\n        pipName: any;\n        ngClass: any;\n        pipRebindAvatar: any;\n        pipRebind: any;\n    }\n\n    const AvatarBindings: IAvatarBindings = {\n        pipId: '<?',\n        pipUrl: '<?',\n        pipName: '<?',\n        ngClass: '<?',\n        pipRebindAvatar: '<?',\n        pipRebind: '<?'\n    }\n\n    class AvatarBindingsChanges implements ng.IOnChangesObject, IAvatarBindings {\n        [key: string]: ng.IChangesObject<any>;\n\n        pipId: ng.IChangesObject<string>;\n        pipUrl: ng.IChangesObject<string>;\n        pipName: ng.IChangesObject<string>;\n        ngClass: ng.IChangesObject<string>;\n        pipRebindAvatar: ng.IChangesObject<boolean>;\n        pipRebind: ng.IChangesObject<boolean>;\n    }\n\n    class AvatarController {\n        private cleanupAvatarUpdated: Function;\n        private imageElement: any;\n        // private iconErrorElement: any;\n        private defaultAvatarElement: any;\n        private image: any;\n\n        public pipId: string;\n        public pipUrl: string;\n        public pipName: string;\n\n        public ngClass: string;\n        public pipRebindAvatar: boolean;\n        public pipRebind: boolean;\n\n        public postLink: boolean = false;\n        // public errorIcon: string;\n        public initial: string;\n\n        constructor(\n            private $log: ng.ILogService,\n            private $http: ng.IHttpService,\n            private $rootScope: ng.IRootScopeService,\n            private $element: JQuery,\n            private pipAvatarData: IAvatarDataService,\n            private pipPictureUtils: IPictureUtilsService,\n            private pipCodes: pip.services.ICodes,\n            private $timeout\n        ) {\n            \"ngInject\";\n\n            this.image = null;\n\n            // this.errorIcon = 'icon:warn-star';\n            this.initial = this.pipAvatarData.DefaultInitial;\n            // Add class\n            $element.addClass('pip-avatar flex-fixed');\n\n            this.$rootScope.$on(ReloadAvatar, ($event: ng.IAngularEvent, id: string) => { //navState\n                if (this.pipId == id && this.pipRebind) {\n                    this.refreshAvatar();\n                }\n            });\n        }\n\n        public $postLink() {\n            this.imageElement = this.$element.children('img');\n            // this.iconErrorElement = this.$element.find('#icon-error');\n            this.defaultAvatarElement = this.$element.find('#default-avatar');\n\n            // When image is loaded resize/reposition it\n            this.imageElement\n                .load(($event) => {\n                    this.image = $($event.target);\n                    this.pipPictureUtils.setImageMarginCSS(this.$element, this.image);\n                })\n                .error(($event) => {\n                    this.showAvatarByName();\n                });\n\n            this.bindControl();\n\n            this.postLink = true;\n        }\n\n        public $onChanges(changes: AvatarBindingsChanges): void {\n            if (changes.pipRebind && changes.pipRebind.currentValue !== changes.pipRebind.previousValue) {\n                this.pipRebind = changes.pipRebind.currentValue;\n            }\n            if (changes.pipRebindAvatar && changes.pipRebindAvatar.currentValue !== changes.pipRebindAvatar.previousValue) {\n                this.pipRebindAvatar = changes.pipRebindAvatar.currentValue;\n            }\n            if (changes.ngClass && changes.ngClass.currentValue !== changes.ngClass.previousValue) {\n                this.ngClass = changes.ngClass.currentValue;\n                setTimeout(() => {\n                    this.pipPictureUtils.setImageMarginCSS(this.$element, this.image);\n                }, 50);\n            }\n\n            let isDataChange: boolean = false;\n            if (this.pipRebind) {\n                if (changes.pipId && changes.pipId.currentValue !== changes.pipId.previousValue) {\n                    this.pipId = changes.pipId.currentValue;\n                    isDataChange = true;\n                }\n\n                if (changes.pipUrl && changes.pipUrl.currentValue !== changes.pipUrl.previousValue) {\n                    this.pipUrl = changes.pipUrl.currentValue;\n                    isDataChange = true;\n                }\n\n                if (changes.pipName && changes.pipName.currentValue !== changes.pipName.previousValue) {\n                    this.pipName = changes.pipName.currentValue;\n                    isDataChange = true;\n                }\n            }\n\n            // this.avatarUrlParams = this.getAvatarUrlParams();\n            if (isDataChange && this.postLink) {\n                this.refreshAvatar();\n            }\n        }\n\n        private showAvatarByName() {\n            this.$timeout(() => {\n                let colorClassIndex = this.pipCodes.hash(this.pipId) % colors.length;\n                this.defaultAvatarElement.removeAttr('class');\n                this.defaultAvatarElement.addClass(colorClasses[colorClassIndex]);\n                this.imageElement.css('display', 'none');\n                this.defaultAvatarElement.css('display', 'inline-block');\n            })\n\n        }\n\n        private toBoolean(value: any): boolean {\n            if (!value) { return false; }\n            value = value.toString().toLowerCase();\n\n            return value == '1' || value == 'true';\n        }\n\n        public refreshAvatar(): void {\n\n            if (!this.pipAvatarData.ShowOnlyNameIcon) {\n                this.imageElement.attr('src', '');\n                this.imageElement.css('display', 'inline-block');\n                this.defaultAvatarElement.css('display', 'none');\n            }\n\n            this.bindControl();\n        };\n\n        public bindControl(): void {\n            if (this.pipRebindAvatar) {\n                this.cleanupAvatarUpdated = this.$rootScope.$on('pipPartyAvatarUpdated', () => { this.refreshAvatar(); });\n            } else {\n                if (this.cleanupAvatarUpdated) {\n                    this.cleanupAvatarUpdated();\n                }\n            }\n\n            if (this.pipName) {\n                this.initial = this.pipName.charAt(0);\n            } else {\n                this.initial = this.pipAvatarData.DefaultInitial;\n            }\n\n            if (!this.pipAvatarData.ShowOnlyNameIcon) {\n                let url = this.pipId ? this.pipAvatarData.getAvatarUrl(this.pipId) : this.pipUrl;\n                this.imageElement.attr('src', url);\n            } else {\n                this.showAvatarByName();\n            }\n        }\n\n    }\n\n    const AvatarComponent: ng.IComponentOptions = {\n        bindings: AvatarBindings,\n        template: '<img/><div id=\"default-avatar\">{{ $ctrl.initial }}</div>',\n        controller: AvatarController\n    }\n\n    angular\n        .module('pipAvatar', ['pipPictureUtils'])\n        .component('pipAvatar', AvatarComponent);\n}\n\n","import { IPictureUtilsService } from '../utilities/IPictureUtils';\nimport { PicturePaste } from '../utilities/PicturePaste';\nimport { IAvatarDataService } from '../data/IAvatarDataService';\nimport { AddImageOption } from '../add_image/AddImageOption';\nimport { AddImageResult } from '../add_image/AddImageResult';\n\nexport const ReloadAvatar = 'pipReloadAvatar';\n\nexport class AvatarEditControl {\n    public reset: (afterDeleting?: boolean) => void;\n    public save: (id?: string, successCallback?: (response?: any) => void, errorCallback?: (error?: any) => void) => void;\n    public abort: () => void;\n    public error?: any;\n\n    public disabled: boolean = false;\n    public url: string = '';\n    public uriData: any;\n    public progress: number = 0;\n    public uploaded: boolean = false;\n    public uploading: boolean = false;\n    public upload: boolean = false;\n    public loaded: boolean = false;\n    public file: any = null;\n    public state: string = AvatarStates.Original;\n}\n\nexport class AvatarStates {\n    static Original: string = 'original';\n    static Changed: string = 'changed';\n    static Deleted: string = 'deleted';\n    static Error: string = 'error';\n}\n\n{\n    const ConfigAvatarEditTranslations = (pipTranslateProvider: pip.services.ITranslateProvider) => {\n        pipTranslateProvider.translations('en', {\n            'PICTURE_EDIT_TEXT': 'Click here to upload a picture',\n            'PICTURE_ERROR_LOAD': 'Error image loading'\n        });\n        pipTranslateProvider.translations('ru', {\n            'PICTURE_EDIT_TEXT': 'Нажмите сюда для загрузки картинки',\n            'PICTURE_ERROR_LOAD': 'Ошибка загрузки картинки'\n        });\n    }\n\n\n    class SenderEvent {\n        $control: AvatarEditControl;\n    }\n\n    class AvatarEvent {\n        $event: SenderEvent;\n        $control: AvatarEditControl;\n    }\n\n    interface IAvatarEditBindings {\n        [key: string]: any;\n\n        ngDisabled: any;\n        pipCreated: any;\n        pipChanged: any;\n        pipReset: any;\n        pipId: any;\n        text: any;\n        icon: any;\n        pipRebind: any;\n    }\n\n    const AvatarEditBindings: IAvatarEditBindings = {\n        ngDisabled: '<?',\n        pipCreated: '&?',\n        pipChanged: '&?',\n        pipReset: '<?',\n        pipId: '<?',\n        text: '<?pipDefaultText',\n        icon: '<?pipDefaultIcon',\n        pipRebind: '<?',\n    }\n\n    class AvatarEditBindingsChanges implements ng.IOnChangesObject, IAvatarEditBindings {\n        [key: string]: ng.IChangesObject<any>;\n\n        ngDisabled: ng.IChangesObject<boolean>;\n        pipCreated: ng.IChangesObject<(params: AvatarEvent) => ng.IPromise<void>>;\n        pipChanged: ng.IChangesObject<(params: AvatarEvent) => ng.IPromise<void>>;\n        pipReset: ng.IChangesObject<boolean>;\n        pipId: ng.IChangesObject<string>;\n        text: ng.IChangesObject<string>;\n        icon: ng.IChangesObject<string>;\n        pipRebind: ng.IChangesObject<boolean>;\n    }\n\n    class AvatarEditController {\n        private controlElement: any;\n        private inputElement: any;\n        private pipPicturePaste: PicturePaste;\n\n        public ngDisabled: boolean;\n        public pipCreated: (params: AvatarEvent) => void;\n        public pipChanged: (params: AvatarEvent) => void;\n        public pipReset: boolean;\n        public text: string;\n        public icon: string;\n        public pipId: string;\n        public pipRebind: boolean;\n\n        public multiUpload: boolean;\n        public errorText: string;\n        public control: AvatarEditControl;\n        public option: AddImageOption;\n\n        constructor(\n            private $log: ng.ILogService,\n            private $scope: ng.IScope,\n            private $http: ng.IHttpService,\n            private $rootScope: ng.IRootScopeService,\n            private $element: JQuery,\n            private $timeout: ng.ITimeoutService,\n            private pipAvatarData: IAvatarDataService,\n            private pipCodes: pip.services.ICodes,\n            private pipPictureUtils: IPictureUtilsService,\n            private pipFileUpload: pip.files.IFileUploadService,\n            private pipRest: pip.rest.IRestService\n        ) {\n            \"ngInject\";\n            this.pipPicturePaste = new PicturePaste($timeout);\n            this.option = new AddImageOption();\n            this.option.WebLink = false;\n            this.option.Galery = false;\n\n            this.text = this.text || 'PICTURE_EDIT_TEXT';\n            this.icon = this.icon || 'picture-no-border';\n            this.errorText = 'PICTURE_ERROR_LOAD';\n\n            this.control = new AvatarEditControl();\n            this.multiUpload = false;\n\n            this.control.reset = (afterDeleting: boolean) => {\n                this.reset(afterDeleting);\n            }\n            this.control.save = (id?: string, successCallback?: (response?: any) => void, errorCallback?: (error?: any) => void): void => {\n                this.save(id, successCallback, errorCallback);\n            }\n            // Add class\n            $element.addClass('pip-picture-edit');\n        }\n\n        public $postLink() {\n            this.controlElement = this.$element.children('.pip-picture-upload');\n            this.inputElement = this.controlElement.children('input[type=file]');\n\n            // Add paste listener\n            this.$element.children('.pip-picture-upload').focus(() => {\n                this.pipPicturePaste.addPasteListener((item) => {\n                    this.readItemLocally(item.url, item.uriData, item.file, item.picture);\n                });\n            });\n\n            this.$element.children('.pip-picture-upload').blur(() => {\n                this.pipPicturePaste.removePasteListener();\n            });\n\n            // Execute callback\n            if (this.pipCreated) {\n                this.pipCreated({\n                    $event: { $control: this.control },\n                    $control: this.control\n                });\n            }\n\n            // Initialize control\n            this.control.reset();\n        }\n\n        public $onChanges(changes: AvatarEditBindingsChanges): void {\n            if (changes.pipRebind && changes.pipRebind.currentValue !== changes.pipRebind.previousValue) {\n                this.pipRebind = changes.pipRebind.currentValue;\n            }\n            if (changes.pipReset && changes.pipReset.currentValue !== changes.pipReset.previousValue) {\n                this.pipReset = changes.pipReset.currentValue;\n            }\n\n            let isReset: boolean = false;\n            if (this.pipRebind) {\n\n                if (changes.pipId && changes.pipId.currentValue !== changes.pipId.previousValue) {\n                    this.pipId = changes.pipId.currentValue;\n                    if (this.pipReset !== false) {\n                        isReset = true;\n                    }\n                }\n\n                if (changes.ngDisabled && changes.ngDisabled.currentValue !== changes.ngDisabled.previousValue) {\n                    this.ngDisabled = changes.ngDisabled.currentValue;\n                }\n            }\n            if (changes.pipId && changes.pipId.currentValue && this.control && this.control.state != AvatarStates.Deleted && this.control.state != AvatarStates.Changed ) {\n                isReset = true;\n            }\n            if (isReset) {\n                this.control.reset();\n            }\n        }\n\n        public reset(afterDeleting: boolean): void {\n            this.control.progress = 0;\n            this.control.uploading = false;\n            this.control.uploaded = false;\n\n            this.control.file = null;\n            this.control.state = AvatarStates.Original;\n            this.control.url = '';\n            this.control.uriData = null;\n\n            if (!afterDeleting) {\n                var url = this.pipId ? this.pipAvatarData.getAvatarUrl(this.pipId) : '';\n\n                if (!url) return;\n\n                this.control.progress = 0;\n                this.control.url = url;\n                this.control.uploaded = this.control.url != '';\n                this.onChange();\n\n            } else this.onChange();\n        }\n\n        public saveAvatar(id: string, successCallback?: (response?: any) => void, errorCallback?: (error?: any) => void): void {\n            if (!id) {\n                id = this.pipId;\n            }\n            if (this.control.file !== null) {\n                let fd: FormData = new FormData();\n                fd.append('file', this.control.file);\n                this.control.uploading = true;\n                this.$http.put(this.pipAvatarData.getAvatarUrl(id), fd, <any>{\n                    uploadEventHandlers: {\n                        progress: (e: any) => {\n                            if (e.lengthComputable) {\n                                this.control.progress = (e.loaded / e.total) * 100;\n                            }\n                        }\n                    },\n                    headers: { 'Content-Type': undefined }\n                })\n                    .success((response: any) => {\n                        this.control.progress = 100;\n\n                        this.pipId = response.id;\n                        this.$rootScope.$broadcast(ReloadAvatar, this.pipId);\n                        \n                        this.control.reset();\n                        if (successCallback) {\n                            successCallback(response);\n                        }\n                    })\n                    .error((error: any) => {\n                        this.control.progress = 0;\n                        this.control.uploading = false;\n                        this.control.upload = false;\n                        this.control.progress = 0;\n                        this.control.state = AvatarStates.Original; //AvatarStates.Error;\n\n                        if (errorCallback) {\n                            errorCallback(error);\n                        } else {\n                            this.$log.error(error);\n                        }\n                    });\n            }\n        }\n\n        public deletePicture(successCallback?: (response?: any) => void, errorCallback?: (error?: any) => void): void {\n            this.pipAvatarData.deleteAvatar(\n                this.pipId,\n                () => {\n                    this.$rootScope.$broadcast(ReloadAvatar, this.pipId);\n                    this.control.reset(true);\n\n                    if (successCallback) { successCallback(); }\n                },\n                (error: any) => {\n                    this.control.uploading = false;\n                    this.control.upload = false;\n                    this.control.progress = 0;\n                    this.control.state = AvatarStates.Original; // AvatarStates.Error;\n\n                    if (errorCallback) {\n                        errorCallback(error);\n                    } else {\n                        this.$log.error(error);\n                    }\n                }\n            );\n        }\n\n        public save(id: string, successCallback?: (response?: any) => void, errorCallback?: (error?: any) => void): void {\n            // Process changes of the image\n            if (this.control.state == AvatarStates.Changed) {\n                this.saveAvatar(id, successCallback, errorCallback);\n            }\n            // Process deletion of the image\n            else if (this.control.state == AvatarStates.Deleted) {\n                this.deletePicture(successCallback, errorCallback);\n            }\n            // Process if no changes were made \n            else {\n                if (successCallback) successCallback();\n            }\n        }\n\n        // Visual publics\n        public empty(): boolean {\n            return this.control.url == '' && !this.control.uploading;\n        };\n\n        public isUpdated(): boolean {\n            return this.control.state != AvatarStates.Original;\n        };\n\n        // Process user events\n        public readItemLocally(url, uriData, file, picture): void {\n            if (picture) {\n                // todo set avatar\n                this.control.url = this.pipAvatarData.getAvatarUrl(this.pipId);\n            } else {\n                this.control.file = file;\n                this.control.url = file ? uriData : url ? url : '';\n                // todo uriData - save as blob\n            }\n\n            this.control.state = AvatarStates.Changed;\n            this.onChange();\n        };\n\n        public onDeleteClick($event: JQueryEventObject): void {\n            if ($event) {\n                $event.stopPropagation();\n            }\n\n            this.controlElement.focus();\n            this.control.file = null;\n            this.control.url = '';\n            this.control.state = AvatarStates.Deleted;\n\n            this.onChange();\n        };\n\n        public onKeyDown($event: KeyboardEvent): void {\n            if ($event.keyCode == 13 || $event.keyCode == 32) {\n                setTimeout(() => {\n                    this.controlElement.trigger('click');\n                }, 0);\n            } else if ($event.keyCode == 46 || $event.keyCode == 8) {\n                this.control.file = null;\n                this.control.url = '';\n                this.control.state = AvatarStates.Deleted;\n\n                this.onChange();\n            } else if ($event.keyCode == 27) {\n                this.control.reset();\n            }\n        };\n\n        // Clean up url to remove broken icon\n        public onImageError($event: JQueryEventObject): void {\n            this.$scope.$apply(() => {\n                this.control.url = '';\n                let image = $($event.target);\n                this.control.state = AvatarStates.Original; // AvatarStates.Error;\n                this.pipPictureUtils.setErrorImageCSS(image, { width: 'auto', height: '100%' });\n            });\n        };\n\n        // When image is loaded resize/reposition it\n        public onImageLoad($event: JQueryEventObject) {\n            let image = $($event.target);\n            let container: any = {}; //JQuery = _.cloneDeep(this.controlElement);\n            container.clientWidth = 80;\n            container.clientHeight = 80;\n            this.pipPictureUtils.setImageMarginCSS(container, image);\n            this.control.uploading = false;\n        };\n\n        // On change event\n        public onChange() {\n            if (this.pipChanged) {\n                this.pipChanged({\n                    $event: { $control: this.control },\n                    $control: this.control\n                });\n            }\n        };\n\n    }\n\n    const AvatarEditComponent: ng.IComponentOptions = {\n        bindings: AvatarEditBindings,\n        templateUrl: 'picture_edit/PictureEdit.html',\n        controller: AvatarEditController\n    }\n\n    angular\n        .module('pipAvatarEdit', ['ui.event', 'pipPictureUtils', 'pipPictures.Templates', 'pipFiles'])\n        .config(ConfigAvatarEditTranslations)\n        .component('pipAvatarEdit', AvatarEditComponent);\n}\n\n","﻿const ConfigCameraDialogTranslations = (pipTranslateProvider: pip.services.ITranslateProvider) => {\n    pipTranslateProvider.translations('en', {\n        'TAKE_PICTURE': 'Take a picture',\n        'WEB_CAM_ERROR': 'Webcam is missing or was not found'\n    });\n    pipTranslateProvider.translations('ru', {\n        'TAKE_PICTURE': 'Сделать фото',\n        'WEB_CAM_ERROR': 'Web-камера отсутствует или не найдена'\n    });\n}\n\ndeclare var Webcam: any;\ndeclare var Camera: any;\n{\n    class CameraDialogController {\n        public webCamError: boolean\n        public theme: string;\n        public browser: string;\n        public freeze: boolean;\n\n        constructor(\n            private $mdDialog: angular.material.IDialogService,\n            private $rootScope: ng.IRootScopeService,\n            private $timeout: ng.ITimeoutService,\n            private $mdMenu,\n            private pipSystemInfo: pip.services.ISystemInfo\n        ) {\n            \"ngInject\";\n\n            this.theme = this.$rootScope[pip.themes.ThemeRootVar];\n            this.browser = this.pipSystemInfo.os;\n            this.freeze = false;\n\n            this.onInit();\n        }\n\n        private onInit() {\n\n\n            if (this.browser !== 'android') {\n                Webcam.init();\n\n                setTimeout(() => {\n                    Webcam.attach('.camera-stream');\n                }, 0);\n\n                Webcam.on('error', (err: any) => {\n                    this.webCamError = true;\n                    console.error(err);\n                });\n\n                Webcam.set({\n                    width: 400,\n                    height: 300,\n\n                    dest_width: 400,\n                    dest_height: 300,\n\n                    crop_width: 400,\n                    crop_height: 300,\n\n                    image_format: 'jpeg',\n                    jpeg_quality: 90\n                });\n\n                //Webcam.setSWFLocation('../../../dist/webcam.swf');\n                Webcam.setSWFLocation('webcam.swf');\n\n            } else {\n                document.addEventListener(\"deviceready\", this.onDeviceReady, false);\n            }\n        }\n\n        // todo add logic in callbacks\n        public onDeviceReady() {\n            (navigator as any).camera.getPicture((data) => { this.onSuccess(data); }, (message) => { this.onFail(message); },\n                {\n                    sourceType: Camera.PictureSourceType.CAMERA,\n                    correctOrientation: true,\n                    quality: 75,\n                    targetWidth: 200,\n                    destinationType: Camera.DestinationType.DATA_URL\n                });\n        }\n\n        public onSuccess(imageData) {\n            //var picture = imageData;\n            var picture = 'data:image/jpeg;base64,' + imageData;\n            this.$mdDialog.hide(picture);\n        }\n\n        public onFail(message) {\n            alert('Failed because: ' + message);\n            this.$mdDialog.hide();\n        }\n\n        public onTakePictureClick() {\n            if (Webcam) {\n                if (this.freeze) {\n                    Webcam.snap((dataUri) => {\n                        this.freeze = false;\n                        this.$mdDialog.hide(dataUri);\n                    });\n                } else {\n                    this.freeze = true;\n                    Webcam.freeze();\n                }\n            }\n        }\n\n        public onResetPicture() {\n            this.freeze = false;\n            Webcam.unfreeze();\n        }\n\n        public onCancelClick() {\n            this.$mdDialog.cancel();\n        }\n    }\n\n\n    angular\n        .module('pipCameraDialog')\n        .config(ConfigCameraDialogTranslations)\n        .controller('pipCameraDialogController', CameraDialogController);\n\n}","import { ICameraDialogService } from './ICameraDialogService';\n\ndeclare var Webcam: any;\n\nclass CameraDialogService implements ICameraDialogService {\n    private _mdDialog: angular.material.IDialogService;\n\n    constructor($mdDialog: angular.material.IDialogService) {\n        this._mdDialog = $mdDialog;\n\n    }\n\n    public show(successCallback?: (result) => void, cancelCallback?: () => void) {\n        this._mdDialog.show({\n            templateUrl: 'camera_dialog/CameraDialog.html',\n            clickOutsideToClose: true,\n            controller: 'pipCameraDialogController',\n            controllerAs: '$ctrl'\n        })\n        .then(\n            (result) => {\n                Webcam.reset();\n                if (successCallback) {\n                    successCallback(result);\n                }\n            }, \n            () => {\n                Webcam.reset();\n            }\n        );\n\n    }\n\n}\n\nangular\n    .module('pipCameraDialog')\n    .service('pipCameraDialog', CameraDialogService);","angular\n    .module('pipCameraDialog',\n        ['ngMaterial', 'pipServices', 'pipPictures.Templates']);\n\nimport './ICameraDialogService';\nimport './CameraDialogService';\nimport './CameraDialogController';\n\n\nexport * from './ICameraDialogService';\n","import { IPictureUtilsService } from '../utilities/IPictureUtils';\nimport { PicturePaste } from '../utilities/PicturePaste';\nimport { IPictureDataService } from '../data/IPictureDataService';\nimport { Attachment } from '../data';\n\n{\n    class ContainerSize {\n        public w: number;\n        public h: number;\n    }\n\n    interface ICollageBindings {\n        [key: string]: any;\n\n        pipPictureIds: any;\n        pipSrcs: any;\n        pipPictures: any;\n        uniqueCode: any;\n        multiple: any;\n        allowOpen: any;\n        pipRebind: any;\n    }\n\n    const CollageBindings: ICollageBindings = {\n        pipPictureIds: '<?',\n        pipSrcs: '<?',\n        pipPictures: '<?',\n        uniqueCode: '<?pipUniqueCode',\n        multiple: '<?pipMultiple',\n        allowOpen: '<?pipOpen',\n        pipRebind: '<?',\n    }\n\n    class CollageBindingsChanges implements ng.IOnChangesObject, ICollageBindings {\n        [key: string]: ng.IChangesObject<any>;\n\n        pipPictureIds: ng.IChangesObject<string[]>;\n        pipSrcs: ng.IChangesObject<string[]>;\n        pipPictures: ng.IChangesObject<Attachment[]>;\n        uniqueCode: ng.IChangesObject<string>;\n        multiple: ng.IChangesObject<boolean>;\n        allowOpen: ng.IChangesObject<boolean>;\n        pipRebind: ng.IChangesObject<boolean>;\n    }\n\n    class CollageController {\n        private debounceCalculateResize: any;\n\n        public pipPictureIds: string[];\n        public pipSrcs: string[];\n        public pipPictures: Attachment[];\n        public uniqueCode: string;\n        public multiple: boolean;\n        public allowOpen: boolean;\n        public pipRebind: boolean;\n\n        private svgData: any;\n        private resized: number;\n        private collageSchemes: any;\n\n        constructor(\n            private $log: ng.ILogService,\n            private $scope: ng.IScope,\n            private $rootScope: ng.IRootScopeService,\n            private $element: JQuery,\n            private pipPictureData: IPictureDataService,\n            private pipPictureUtils: IPictureUtilsService,\n            private pipCodes: pip.services.ICodes\n        ) {\n            \"ngInject\";\n\n            // Add class\n            $element.addClass('pip-collage');\n\n            this.collageSchemes = pipPictureUtils.getCollageSchemes(),\n                this.resized = 0;\n            this.svgData = '<?xml version=\"1.0\" encoding=\"utf-8\"?>' +\n                '<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">' +\n                '<svg version=\"1.1\"'+\n                    'xmlns=\"http://www.w3.org/2000/svg\"'+\n                    'xmlns:xlink=\"http://www.w3.org/1999/xlink\"'+\n                    'x=\"0px\" y=\"0px\"'+\n                    'viewBox=\"0 0 510 510\"'+\n                    'style=\"enable-background:new 0 0 515 515;\"'+\n                    'xml:space=\"preserve\">'+\n                    '<defs>'+\n                    '<style type=\"text/css\"><![CDATA['+\n                    '#symbol-picture-no-border {'+\n                    '        transform-origin: 50% 50%;'+\n                    '        transform: scale(0.6, -0.6);'+\n                    '    }'+\n                    '        ]]></style>'+\n                    '        </defs>'+\n                    '<rect x=\"0\" width=\"515\" height=\"515\"/>'+\n                    '<path id=\"symbol-picture-no-border\" d=\"M120 325l136-102 69 33 136-82 0-54-410 0 0 136z m341 15c0-28-23-51-51-51-29 0-52 23-52 51 0 29 23 52 52 52 28 0 51-23 51-52z\" />'+\n                    '</svg>';\n\n            this.debounceCalculateResize = _.debounce(() => { this.calculateResize(); }, 50);\n        }\n\n        public $postLink() {\n            this.$scope.getElementDimensions = () => {\n                let dimension = {\n                    'h': this.$element.height(),\n                    'w': this.$element.width()\n                };\n\n                return dimension;\n            }\n\n            this.$scope.$watch(this.$scope.getElementDimensions, (newValue: ContainerSize, oldValue: ContainerSize) => {\n                if (newValue && oldValue && oldValue.h == newValue.h && oldValue.w == newValue.w) return;\n                this.debounceCalculateResize();\n            }, true);\n\n            this.generateContent();\n        }\n\n        public $onChanges(changes: CollageBindingsChanges): void {\n            if (changes.pipRebind && changes.pipRebind.currentValue !== changes.pipRebind.previousValue) {\n                this.pipRebind = changes.pipRebind.currentValue;\n            }\n\n            if (changes.allowOpen && changes.allowOpen.currentValue !== changes.allowOpen.previousValue) {\n                this.allowOpen = changes.allowOpen.currentValue;\n            }\n\n            let isChanged: boolean = false;\n            if (this.pipRebind) {\n                if (changes.pipSrcs && !_.isEqual(changes.pipSrcs.currentValue, changes.pipSrcs.previousValue)) {\n                    this.pipSrcs = changes.pipSrcs.currentValue;\n                    isChanged = true;\n                }\n                if (changes.pipPictureIds && !_.isEqual(changes.pipPictureIds.currentValue, changes.pipPictureIds.previousValue)) {\n                    this.pipPictureIds = changes.pipPictureIds.currentValue;\n                    isChanged = true;\n                }\n                if (changes.pipPictures && !_.isEqual(changes.pipPictures.currentValue, changes.pipPictures.previousValue)) {\n                    this.pipPictures = changes.pipPictures.currentValue;\n                    isChanged = true;\n                }\n            }\n\n            if (isChanged) {\n                this.generateContent();\n            }\n        }\n\n        public calculateResize(): void {\n            let ims = this.$element.find('img');\n            let i: number = 0;\n            for (i; i < ims.length; i++) {\n                let container = angular.element(ims[i].parentElement);\n                let image = angular.element(ims[i]);\n\n                if (image.css('display') != 'none') {\n                    this.pipPictureUtils.setImageMarginCSS(container, image);\n                }\n            }\n\n            let icns = this.$element.find('md-icon');\n\n            for (i; i < icns.length; i++) {\n                let container = angular.element(icns[i].parentElement);\n                let icn = angular.element(icns[i]);\n                if (container.css('display') != 'none') {\n                    this.pipPictureUtils.setIconMarginCSS(container[0], icn);\n                }\n            }\n        }\n\n        // Clean up url to remove broken icon\n        public onImageError($event: JQueryEventObject): void {\n            let image = $($event.target);\n            let container = image.parent();\n            let defaultBlock = container.children('div');\n            let defaultIcon = image.parent().find('md-icon');\n\n            defaultBlock.css('display', 'block');\n            image.css('display', 'none');\n            this.pipPictureUtils.setIconMarginCSS(container[0], defaultIcon);\n            defaultIcon.empty().append(this.svgData);\n        }\n\n        // When image is loaded resize/reposition it\n        public onImageLoad($event: JQueryEventObject) {\n            let image = $($event.target);\n            let container = image.parent();\n            let defaultBlock = container.children('div');\n\n            this.pipPictureUtils.setImageMarginCSS(container, image);\n            defaultBlock.css('display', 'none');\n        }\n\n        public getScheme(count: number): any {\n            let schemes = this.collageSchemes[count - 1];\n\n            // If nothing to choose from then return\n            if (schemes.length == 1) return schemes[0];\n\n            // Calculate unique had code\n            let uniqueCode: string = this.uniqueCode ? this.uniqueCode : '';\n            let hash = this.pipCodes.hash(uniqueCode);\n\n            // Return reproducable scheme by hash\n            return schemes[hash % schemes.length];\n        }\n\n        public getImageUrls(): string[] {\n            // Simply return sources\n            if (this.pipSrcs) {\n\n                return _.clone(this.pipSrcs);\n            }\n\n            let i: number;\n            let result: string[] = [];\n            // Calculate urls if picture ids are specified\n            if (this.pipPictureIds) {\n                for (i = 0; i < this.pipPictureIds.length; i++) {\n                    result.push(this.pipPictureData.getPictureUrl(this.pipPictureIds[i]));\n                }\n            } else if (this.pipPictures) {\n                for (i = 0; i < this.pipPictures.length; i++) {\n                    let url = this.pipPictures[i].uri ? this.pipPictures[i].uri : this.pipPictureData.getPictureUrl(this.pipPictures[i].id);\n                    result.push(url);\n                }\n            }\n\n            // Return an empty array otherwise\n            return result;\n        }\n\n        public generatePicture(urls: string[], scheme: any): string {\n            let url: string = urls[0];\n            let containerClasses: string = '';\n            let pictureClasses: string = '';\n\n            urls.splice(0, 1);\n\n            containerClasses += scheme.fullWidth ? ' pip-full-width' : '';\n            containerClasses += scheme.fullHeight ? ' pip-full-height' : '';\n            containerClasses += ' flex-' + scheme.flex;\n\n            pictureClasses += scheme.leftPadding ? ' pip-left' : '';\n            pictureClasses += scheme.rightPadding ? ' pip-right' : '';\n            pictureClasses += scheme.topPadding ? ' pip-top' : '';\n            pictureClasses += scheme.bottomPadding ? ' pip-bottom' : '';\n\n            if (this.allowOpen) {\n                return '<a class=\"pip-picture-container' + containerClasses + '\" flex=\"' + scheme.flex + '\" '\n                    + 'href=\"' + url + '\"  target=\"_blank\">'\n                    + '<div class=\"pip-picture' + pictureClasses + '\"><img src=\"' + url + '\"/>'\n                    + '<div><md-icon class=\"collage-error-icon\" md-svg-icon=\"icons:picture-no-border\"></md-icon></div></div></a>';\n            }\n\n            return '<div class=\"pip-picture-container' + containerClasses + '\" flex=\"' + scheme.flex + '\">'\n                + '<div class=\"pip-picture' + pictureClasses + '\"><img src=\"' + url + '\"/>'\n                + '<div><md-icon class=\"collage-error-icon\" md-svg-icon=\"icons:picture-no-border\"></md-icon></div></div></div>';\n        }\n\n        public generatePictureGroup(urls: string[], scheme: any): string {\n            let classes: string = '';\n            let result: string;\n            let i: number;\n\n            classes += scheme.fullWidth ? ' pip-full-width' : '';\n            classes += scheme.fullHeight ? ' pip-full-height' : '';\n            classes += ' flex-' + scheme.flex;\n            classes += ' layout-' + scheme.layout;\n\n            result = '<div class=\"pip-picture-group layout' + classes + '\" flex=\"'\n                + scheme.flex + '\" layout=\"' + scheme.layout + '\">';\n\n            // Generate content for children recursively\n            for (i = 0; i < scheme.children.length; i++) {\n                result += this.generate(urls, scheme.children[i]);\n            }\n            result += '</div>';\n\n            return result;\n        }\n\n        public generate(urls: string[], scheme: any): string {\n            if (scheme.group) {\n                return this.generatePictureGroup(urls, scheme);\n            }\n\n            return this.generatePicture(urls, scheme);\n        }\n\n        public generateContent(): void {\n            // Unbind previously defined actions handlers\n            this.$element.find('img')\n                .unbind('error')\n                .unbind('load');\n\n            // Clean up content\n            this.$element.empty();\n\n            // Calculate list of image urls\n            let urls: string[] = this.getImageUrls();\n            let scheme: any;\n            let html: string;\n\n            // And exit if nothing to show\n            if (urls.length == 0) {\n                this.$element.hide();\n\n                return;\n            }\n\n            // Limit collage only to one element if not specified otherwise\n            if (urls.length > 8) {\n                if (!this.multiple) {\n                    urls.length = 8;\n                }\n            }\n\n            if (urls.length <= 8) {\n                // Get scheme for visualization\n                scheme = this.getScheme(urls.length);\n\n                // Generate and add content\n                html = '<div class=\"pip-collage-section\">' + this.generate(urls, scheme) + '</div>';\n                html += '<div class=\"clearfix\"></div>';\n                this.$element.html(html);\n            } else {\n                html = '';\n\n                while (urls.length > 0) {\n                    let partialUrls = urls.splice(0, 8);\n\n                    // Get scheme for visualization\n                    scheme = this.getScheme(partialUrls.length);\n\n                    // Generate and add content\n                    html += '<div class=\"pip-collage-section\">' + this.generate(partialUrls, scheme) + '</div>';\n                }\n\n                html += '<div class=\"clearfix\"></div>';\n                this.$element.html(html);\n            }\n\n            // Bind events to images...\n            this.$element.find('img')\n                .bind('error', (event) => { this.onImageError(event); })\n                .bind('load', (event) => { this.onImageLoad(event); });\n\n            // Show the new element\n            this.$element.show();\n        }\n\n    }\n\n    const CollageComponent: ng.IComponentOptions = {\n        bindings: CollageBindings,\n        controller: CollageController\n    }\n\n    angular\n        .module('pipCollage', [])\n        .component('pipCollage', CollageComponent);\n}\n\n","export class Attachment {\n    public constructor(id?: string, uri?: string, name?: string) {\n        this.id = id;\n        this.uri = uri;\n        this.name = name;\n    }\n    public id?: string;\n    public uri?: string;\n    public name?: string;\n} ","import { IAvatarDataService, IAvatarDataProvider, AvatarConfig } from './IAvatarDataService';\nimport { BlobInfo } from './BlobInfo';\n\nclass AvatarData implements IAvatarDataService {\n\n    constructor(\n        private _config: AvatarConfig,\n        private pipRest: pip.rest.IRestService\n    ) {\n         \"ngInject\";\n     }\n\n    public get AvatarRoute(): string {\n        return this._config.AvatarRoute;\n    }\n\n    public get ShowOnlyNameIcon(): boolean {\n        return this._config.ShowOnlyNameIcon;\n    }\n\n    public get DefaultInitial(): string {\n        return this._config.DefaultInitial;\n    }\n\n    public getAvatarUrl(id: any): string {\n        return this.pipRest.serverUrl + this._config.AvatarRoute + '/' + id;\n    }\n\n    public postAvatarUrl(): string {\n        return this.pipRest.serverUrl + this._config.AvatarRoute;\n    }\n\n    public deleteAvatar(id: string, successCallback?: () => void, errorCallback?: (error: any) => void): void {\n        let params = {};\n        params[this._config.AvatarFieldId] = id;\n        this.pipRest.getResource(this._config.AvatarResource).remove(\n            params,\n            null,\n            successCallback,\n            errorCallback\n        );\n    }\n\n    public createAvatar(data: any, successCallback?: (data: BlobInfo) => void,\n        errorCallback?: (error: any) => void, progressCallback?: (progress: number) => void): void {\n\n    }\n\n}\n\nclass AvatarDataProvider implements IAvatarDataProvider {\n    private _service: IAvatarDataService;\n    private _config: AvatarConfig;\n\n    constructor(\n        private pipRestProvider: pip.rest.IRestProvider\n    ) {\n        this._config = new AvatarConfig();\n        \n        this._config.AvatarRoute = '/api/1.0/avatars';\n        this._config.AvatarResource = 'avatars';\n        this._config.AvatarFieldId = 'avatar_id';\n        this._config.ShowOnlyNameIcon = false;\n        this._config.DefaultInitial = '&';\n    }\n\n    public get AvatarRoute(): string {\n        return this._config.AvatarRoute;\n    }\n\n    public set AvatarRoute(value: string) {\n        this._config.AvatarRoute = value;\n        this.pipRestProvider.registerOperation('avatars', this._config.AvatarRoute + '/:avatar_id');\n    }\n\n    public get AvatarResource(): string {\n        return this._config.AvatarResource;\n    }\n\n    public set AvatarResource(value: string) {\n        this._config.AvatarResource = value;\n    }\n\n    public get AvatarFieldId(): string {\n        return this._config.AvatarFieldId;\n    }\n\n    public set AvatarFieldId(value: string) {\n        this._config.AvatarFieldId = value;\n    }\n\n    public get ShowOnlyNameIcon(): boolean {\n        return this._config.ShowOnlyNameIcon;\n    }\n\n    public set ShowOnlyNameIcon(value: boolean) {\n        this._config.ShowOnlyNameIcon = value;\n    }\n\n    public get DefaultInitial(): string {\n        return this._config.DefaultInitial;\n    }\n\n    public set DefaultInitial(value: string) {\n        this._config.DefaultInitial = value;\n    }\n\n    public $get(\n        pipRest: pip.rest.IRestService\n    ) {\n        \"ngInject\";\n\n        if (this._service == null) {\n            this._service = new AvatarData(this._config, pipRest);\n        }\n\n        return this._service;\n    }\n\n}\n\n\nangular\n    .module('pipAvatarData', ['pipRest'])\n    .provider('pipAvatarData', AvatarDataProvider);\n\n\n","export class BlobInfo {\n\n    public constructor(id: string, group: string, name: string, size?: number,\n        content_type?: string, create_time?: Date, expire_time?: Date, completed?: boolean) {\n        this.id = id;\n        this.group = group;\n        this.name = name;\n        this.size = size;\n        this.content_type = content_type;\n        this.create_time = create_time;\n        this.expire_time = expire_time;\n        this.completed = completed;\n    }\n\n    /* Identification */\n    public id: string;\n    public group: string;\n    public name: string;\n\n    /* Content */\n    public size: number;\n    public content_type: string;\n    public create_time: Date;\n    public expire_time: Date;\n    public completed: boolean;\n}","export class DataPage<T> {\n    public constructor(data: T[] = null, total: number = null) {\n\t\tthis.total = total;\n\t\tthis.data = data;\n\t}\n\n    public total: number;\n    public data: T[];\n}","import { BlobInfo } from './BlobInfo';\n\nexport class AvatarConfig {\n    // custom avatar route\n    public AvatarRoute: string;\n    // custom avatar resource name\n    public AvatarResource: string;\n    public AvatarFieldId: string;\n    // show only first letter for name as avatar \n    public ShowOnlyNameIcon: boolean;\n    // default first name  letter\n    public DefaultInitial: string;\n}\n\nexport const colorClasses = [\n    'pip-avatar-color-0', 'pip-avatar-color-1', 'pip-avatar-color-2', 'pip-avatar-color-3',\n    'pip-avatar-color-4', 'pip-avatar-color-5', 'pip-avatar-color-6', 'pip-avatar-color-7',\n    'pip-avatar-color-8', 'pip-avatar-color-9', 'pip-avatar-color-10', 'pip-avatar-color-11',\n    'pip-avatar-color-12', 'pip-avatar-color-13', 'pip-avatar-color-14', 'pip-avatar-color-15'\n];\n\nexport const colors = [\n    'rgba(239,83,80,1)', 'rgba(236,64,122,1)', 'rgba(171,71,188,1)',\n    'rgba(126,87,194,1)', 'rgba(92,107,192,1)', 'rgba(3,169,244,1)',\n    'rgba(0,188,212,1)', 'rgba(0,150,136,1)', 'rgba(76,175,80,1)',\n    'rgba(139,195,74,1)', 'rgba(205,220,57,1)', 'rgba(255,193,7,1)',\n    'rgba(255,152,0,1)', 'rgba(255,87,34,1)', 'rgba(121,85,72,1)',\n    'rgba(96,125,139,1)'\n];\n\nexport interface IAvatarDataService {\n    AvatarRoute: string;\n    ShowOnlyNameIcon: boolean;\n    DefaultInitial: string;\n\n    getAvatarUrl(id: any): string;\n    postAvatarUrl(): string;\n\n    deleteAvatar(id: string, successCallback?: () => void, errorCallback?: (error: any) => void): void;\n    createAvatar(data: any, successCallback?: (data: BlobInfo) => void,\n        errorCallback?: (error: any) => void, progressCallback?: (progress: number) => void): void;\n}\n\nexport interface IAvatarDataProvider extends ng.IServiceProvider {\n    AvatarRoute: string;\n    AvatarResource: string;\n    DefaultInitial: string;\n    ShowOnlyNameIcon: boolean;\n    AvatarFieldId: string;    \n}\n","import { BlobInfo } from './BlobInfo';\nimport { DataPage } from './DataPage';\n\nexport class PictureConfig {\n    public PictureRoute: string;\n    public DefaultErrorIcon: string;\n    public ShowErrorIcon: boolean;\n}\n\nexport interface IPictureDataService {\n    PictureRoute: string;\n    DefaultErrorIcon: string;\n    ShowErrorIcon: boolean;\n\n    getPictureUrl(id: string): string;\n    postPictureUrl(): string\n    readPictures(params: any, successCallback?: (data: DataPage<BlobInfo>) => void, errorCallback?: (error: any) => void): angular.IPromise<any>\n    readPictureInfo(params: any, successCallback?: (data: BlobInfo) => void, errorCallback?: (error: any) => void): angular.IPromise<any>;\n    readPicture(id: string, successCallback?: (data: any) => void, errorCallback?: (error: any) => void): angular.IPromise<any>;\n    deletePicture(id: string, successCallback?: () => void, errorCallback?: (error: any) => void): void;    \n}\n\n\nexport interface IPictureDataProvider extends ng.IServiceProvider {\n    PictureRoute: string;\n    DefaultErrorIcon: string;\n    ShowErrorIcon: boolean;\n\n    getPictureUrl(id: string): string;\n}\n","export class Image {\n    title: string;\n    link: string;\n    thumbnail: string;\n}\n","import { Attachment } from './Attachment';\n\nexport class ImageSet {\n\n    public constructor(id: string, title: string, picIds?: string[], create_time?: Date) {\n        this.id = id;\n        this.title = title;\n        this.pics = [];\n        this.create_time = create_time;\n    }\n\n    /* Identification */\n    public id: string;\n\n    /* Automatically set fields */\n    public create_time: Date;\n\n    /* Content */\n    public title: string;\n    public pics?: Attachment[];\n\n    /* Search */\n    public tags?: string[];\n    public all_tags?: string[];\n}","import { IImageSetDataService } from './IImageSetDataService';\nimport { ImageSet } from './ImageSet';\nimport { DataPage } from './DataPage';\n\nclass ImageSetData implements IImageSetDataService {\n    private RESOURCE: string = 'imagesets';\n\n    constructor(\n        private pipRest: pip.rest.IRestService,\n        private pipFormat: pip.services.IFormat\n\n    ) {\n        \"ngInject\";\n    }\n\n    public readImageSets(params: any, successCallback?: (data: DataPage<ImageSet>) => void,\n        errorCallback?: (error: any) => void): ng.IPromise<any> {\n\n        params = params || {};\n        // if (params.filter) {\n        //     params.filer = this.pipFormat.filterToString(params.filer);\n        // }\n\n        return this.pipRest.getResource(this.RESOURCE).page(params, successCallback, errorCallback);\n    }\n\n    public readImageSet(id: string, successCallback?: (data: ImageSet) => void,\n        errorCallback?: (error: any) => void): ng.IPromise<any> {\n\n        return this.pipRest.getResource(this.RESOURCE).get(\n            { imagesets_id: id },\n            successCallback,\n            errorCallback\n        );\n    }\n\n    public updateImageSet(id: string, data: ImageSet, successCallback?: (data: ImageSet) => void,\n        errorCallback?: (error: any) => void): void {\n\n        this.pipRest.getResource(this.RESOURCE).update(\n            { imagesets_id: id },\n            data,\n            successCallback,\n            errorCallback\n        );\n\n    }\n\n    public createImageSet(data: ImageSet, successCallback?: (data: any) => void,\n        errorCallback?: (error: any) => void): void {\n\n        this.pipRest.getResource(this.RESOURCE).save(\n            null,\n            data,\n            successCallback,\n            errorCallback\n        );\n    }\n\n\n    public deleteImageSet(id: string, successCallback?: () => void,\n        errorCallback?: (error: any) => void): void {\n\n        this.pipRest.getResource(this.RESOURCE).remove(\n            { imagesets_id: id },\n            null,\n            successCallback,\n            errorCallback\n        );\n    }\n}\n\nangular\n    .module('pipImageSetData', ['pipRest'])\n    .service('pipImageSetData', ImageSetData);\n\n","import { IPictureDataService, IPictureDataProvider, PictureConfig } from './IPictureDataService';\nimport { BlobInfo } from './BlobInfo';\nimport { DataPage } from './DataPage';\n\nclass PictureData implements IPictureDataService {\n    private RESOURCE: string = 'picture';\n    private RESOURCE_INFO: string = 'pictureInfo';\n\n    constructor(\n        private _config: PictureConfig,\n        private pipFormat: pip.services.IFormat,\n        private pipRest: pip.rest.IRestService\n    ) {\n        \"ngInject\";\n    }\n\n    public get PictureRoute(): string {\n        return this._config.PictureRoute;\n    }\n\n    public get ShowErrorIcon(): boolean {\n        return this._config.ShowErrorIcon;\n    }\n    \n    public get DefaultErrorIcon(): string {\n        return this._config.DefaultErrorIcon;\n    }\n\n    public getPictureUrl(id: string): string {\n        return this.pipRest.serverUrl + this._config.PictureRoute + '/' + id;\n    }\n\n    public postPictureUrl(): string {\n        return this.pipRest.serverUrl + this._config.PictureRoute;\n    }\n\n    public readPictures(params: any, successCallback?: (data: DataPage<BlobInfo>) => void, errorCallback?: (error: any) => void): angular.IPromise<any> {\n        params = params || {};\n        if (params.filter) {\n            params.filer = this.pipFormat.filterToString(params.filer);\n        }\n\n        return this.pipRest.getResource(this.RESOURCE).page(params, successCallback, errorCallback);\n    }\n\n    public readPictureInfo(params: any, successCallback?: (data: BlobInfo) => void, errorCallback?: (error: any) => void): angular.IPromise<any> {\n        params = params || {};\n        if (params.filter) {\n            params.filer = this.pipFormat.filterToString(params.filer);\n        }\n\n        return this.pipRest.getResource(this.RESOURCE_INFO).get(params, successCallback, errorCallback);\n    }\n\n    public readPicture(id: string, successCallback?: (data: any) => void, errorCallback?: (error: any) => void): angular.IPromise<any> {\n\n        return this.pipRest.getResource(this.RESOURCE).get({\n            picture_id: id\n        }, successCallback, errorCallback);\n    }\n\n    public deletePicture(id: string, successCallback?: () => void, errorCallback?: (error: any) => void): void {\n        this.pipRest.getResource(this.RESOURCE).remove(\n            { picture_id: id },\n            null,\n            successCallback,\n            errorCallback\n        );\n    }\n}\n\nclass PictureDataProvider implements IPictureDataProvider {\n    private _service: IPictureDataService;\n    private _config: PictureConfig;\n\n    constructor(\n        private pipRestProvider: pip.rest.IRestProvider\n    ) {\n        this._config = new PictureConfig();\n\n        this._config.PictureRoute = '/api/1.0/blobs';\n        this._config.ShowErrorIcon = true;\n        this._config.DefaultErrorIcon = 'picture-no-border';\n    }\n\n    public get PictureRoute(): string {\n        return this._config.PictureRoute;\n    }\n\n    public getPictureUrl(id: string): string {\n        return this.pipRestProvider.serverUrl + this._config.PictureRoute + '/' + id;\n    }\n\n    public set PictureRoute(value: string) {\n        this._config.PictureRoute = value;\n\n        this.pipRestProvider.registerOperation('pictures', this._config.PictureRoute + '/:picture_id');\n    }\n\n    public get DefaultErrorIcon(): string {\n        return this._config.DefaultErrorIcon;\n    }\n\n    public set DefaultErrorIcon(value: string) {\n        this._config.DefaultErrorIcon = value;\n\n        this.pipRestProvider.registerOperation('pictures', this._config.PictureRoute + '/:picture_id');\n    }\n\n    public get ShowErrorIcon(): boolean {\n        return this._config.ShowErrorIcon;\n    }\n\n    public set ShowErrorIcon(value: boolean) {\n        this._config.ShowErrorIcon = value;\n    }\n\n    public $get(\n        pipRest: pip.rest.IRestService,\n        pipFormat: pip.services.IFormat\n    ) {\n        \"ngInject\";\n\n        if (this._service == null) {\n            this._service = new PictureData(this._config, pipFormat, pipRest);\n        }\n\n        return this._service;\n    }\n\n}\n\n\nangular\n    .module('pipPictureData', ['pipRest'])\n    .provider('pipPictureData', PictureDataProvider);\n","import './Attachment';\nimport './BlobInfo';\nimport './DataPage';\nimport './ImageSet';\nimport './Image';\n\nimport './AvatarDataService';\nimport './IAvatarDataService';\nimport './ImageSetDataService';\nimport './IImageSetDataService';\nimport './PictureDataService';\nimport './IPictureDataService';\n\nangular\n    .module('pipPictures.Data', [\n        'pipAvatarData', \n        'pipPictureData',\n        'pipImageSetData'\n    ]);\n\nexport * from './Attachment';\nexport * from './BlobInfo';\nexport * from './DataPage';\nexport * from './ImageSet';\nexport * from './Image';\nexport * from './IImageSetDataService';\nexport * from './IAvatarDataService';\nexport * from './IPictureDataService';\n","﻿import { GallerySearchDialogParams } from './IGallerySearchDialogService'\nimport { IImageSetDataService, IPictureDataService, DataPage, Attachment, ImageSet } from '../data';\n\n\n\nconst ConfigGallerySearchDialogTranslations = (pipTranslateProvider: pip.services.ITranslateProvider) => {\n    pipTranslateProvider.translations('en', {\n        'IMAGE_GALLERY': 'Add from image gallery',\n        'SEARCH_PICTURES': 'Search for pictures...',\n        'IMAGE_START_SEARCH': 'Images will appear here once you start searching'\n    });\n    pipTranslateProvider.translations('ru', {\n        'IMAGE_GALLERY': 'Добавить из галереи изображений',\n        'SEARCH_PICTURES': 'Поиск изображений...',\n        'IMAGE_START_SEARCH': 'Картинки появятся после начала поиска'\n    });\n}\n\nclass GallerySearchDialogImage {\n    public checked: boolean;\n    public url: string;\n    public thumbnail: any\n    public item: Attachment\n}\n\nclass GallerySearchDialogController extends GallerySearchDialogParams {\n\n    public theme: string;\n\n    public prevSearch: string = '';\n    private url: string;\n    public images: any[];\n    public imagesSearchResult: any[];\n    public search: string;\n    public transaction: pip.services.Transaction;\n\n    constructor(\n        private $log: ng.ILogService,\n        private $mdDialog: angular.material.IDialogService,\n        private $rootScope: ng.IRootScopeService,\n        private $timeout: ng.ITimeoutService,\n        private $mdMenu,\n        public multiple: boolean,\n        private $http: ng.IHttpService,\n        private pipRest: pip.rest.IRestService,\n        private pipTransaction: pip.services.ITransactionService,\n        private pipImageSetData: IImageSetDataService,\n        private pipPictureData: IPictureDataService\n    ) {\n        \"ngInject\";\n\n        super();\n\n        // this.url = this.pipRest.serverUrl + '/api/images/search';\n        this.images = [];\n        this.theme = this.$rootScope[pip.themes.ThemeRootVar];\n        this.search = '';\n        this.imagesSearchResult = [];\n        this.transaction = this.pipTransaction.create('search');\n\n        this.focusSearchText();\n    }\n\n    public onSearchClick(): void {\n        if (this.transaction.busy()) return;\n\n        if (this.search == '' || this.search == this.prevSearch) return;\n\n        this.prevSearch = this.search;\n        this.imagesSearchResult = [];\n\n        // let requestUrl: string = this.url + '?q=' + this.search;\n\n        let transactionId: string = this.transaction.begin('ENTERING');\n        if (!transactionId) return;\n\n        this.pipImageSetData.readImageSets(\n            {\n                Search: this.search\n            },\n            (result: DataPage<ImageSet>) => {\n                if (this.transaction.aborted(transactionId)) return;\n\n                _.each(result.data, (item: ImageSet) => { // todo add type to image_set\n                    _.each(item.pics, (img: Attachment) => {\n                        let newImage: GallerySearchDialogImage = {\n                            checked: false,\n                            url: img.uri ? img.uri : this.pipPictureData.getPictureUrl(img.id),\n                            item: img,\n                            // todo ?? thumbnail\n                            thumbnail: img.uri ? img.uri : this.pipPictureData.getPictureUrl(img.id)\n                        };\n                        this.imagesSearchResult.push(newImage);\n                    })\n\n                })\n\n                this.transaction.end();\n            },\n            (error) => {\n                this.transaction.end(error);\n                this.$log.error(error);\n            }\n        )\n    } Attachment\n\n    public onStopSearchClick(): void {\n        this.transaction.abort();\n        this.prevSearch = '';\n    }\n\n    public onKeyPress($event: KeyboardEvent): void {\n        if ($event.keyCode === 13) {\n            this.onSearchClick();\n        }\n    }\n\n    public onImageClick(image: GallerySearchDialogImage): void {\n        if (this.transaction.busy()) { return; }\n\n        image.checked = !image.checked;\n\n        if (this.multiple) {\n            if (image.checked) {\n                this.images.push(image);\n            } else {\n                _.remove(this.images, { url: image.url });\n            }\n        } else {\n            if (image.checked) {\n                if (this.images.length > 0) {\n                    this.images[0].checked = false;\n                    this.images[0] = image;\n                } else {\n                    this.images.push(image);\n                }\n            } else {\n                this.images = [];\n            }\n        }\n    }\n\n    public onAddClick(): void {\n        if (this.transaction.busy()) { return; }\n\n        let result: Attachment[] = [];\n        this.images.forEach((image: GallerySearchDialogImage) => {\n            if (image.checked) {\n                result.push(image.item);\n            }\n        });\n        this.$mdDialog.hide(result);\n    }\n\n    public onCancelClick(): void {\n        this.$mdDialog.cancel();\n    }\n\n    public addButtonDisabled(): boolean {\n        return this.images.length == 0 || this.transaction.busy();\n    }\n\n    public focusSearchText(): void {\n        setTimeout(() => {\n            let element = $('.pip-gallery-search-dialog .search-images');\n            if (element.length > 0) {\n                element.focus();\n            }\n        }, 0);\n    }\n}\n\n\n\nangular\n    .module('pipGallerySearchDialog')\n    .config(ConfigGallerySearchDialogTranslations)\n    .controller('pipGallerySearchController', GallerySearchDialogController);","import { IGallerySearchDialogService, GallerySearchDialogParams } from './IGallerySearchDialogService';\nimport { Attachment } from '../data';\n\nclass GallerySearchDialogService implements IGallerySearchDialogService {\n    private _mdDialog: angular.material.IDialogService;\n\n    constructor($mdDialog: angular.material.IDialogService) {\n        this._mdDialog = $mdDialog;\n    }\n\n    public show(params: GallerySearchDialogParams, successCallback?: (result: Attachment[]) => void, cancelCallback?: () => void) {\n        this._mdDialog.show({\n            templateUrl: 'gallery_search_dialog/GallerySearchDialog.html',\n            clickOutsideToClose: true,\n            controller: 'pipGallerySearchController',\n            controllerAs: '$ctrl',\n            locals: params\n        })\n            .then(\n            (result: Attachment[]) => {\n                if (successCallback) {\n                    successCallback(result);\n                }\n            });\n    }\n\n}\n\nangular\n    .module('pipGallerySearchDialog')\n    .service('pipGallerySearchDialog', GallerySearchDialogService);","import { Attachment } from '../data';\n\nexport class GallerySearchDialogParams {\n    public multiple: boolean;\n}\n\nexport interface IGallerySearchDialogService {\n    show(params: GallerySearchDialogParams, successCallback?: (result: Attachment[][]) => void, cancelCallback?: () => void): any;\n}\n\n","angular\n    .module('pipGallerySearchDialog',\n        ['ngMaterial', 'pipPictures.Templates', 'pipCommonRest']);\n\nimport './IGallerySearchDialogService';\nimport './GallerySearchDialogService';\nimport './GallerySearchDialogController';\n\n\nexport * from './IGallerySearchDialogService';\n\n","import './data';\nimport './rest';\n\nimport './camera_dialog';\nimport './add_image/AddImage';\nimport './add_image/AddImageOption';\nimport './add_image/AddImageResult';\nimport './avatar/Avatar';\nimport './avatar_edit/AvatarEdit';\nimport './collage/Collage';\nimport './gallery_search_dialog';\nimport './picture/Picture';\nimport './picture_edit/PictureEdit';\nimport './picture_list_edit/PictureListEdit';\nimport './picture_url_dialog';\nimport './utilities';\n\nangular\n    .module('pipPictures', [\n        'pipControls',\n\n        'pipPictures.Data',\n        'pipPictures.Rest',\n        'pipCameraDialog',\n        'pipGallerySearchDialog',\n        'pipPictureUrlDialog',\n        'pipAddImage',\n        'pipAvatar',\n        'pipPictureUtils',\n        'pipPicturePaste',\n        'pipAvatarEdit',\n        'pipPicture',\n        'pipPictureEdit',\n        'pipCollage',\n        'pipPictureListEdit',\n\n    ]);\n\nexport * from './avatar/Avatar';\nexport * from './data';\nexport * from './avatar_edit/AvatarEdit';\nexport * from './add_image/AddImageOption';\nexport * from './add_image/AddImageResult';\nexport * from './collage/Collage';\nexport * from './camera_dialog';\nexport * from './gallery_search_dialog';\nexport * from './picture_edit/PictureEdit';\nexport * from './picture_list_edit/PictureListEdit';\nexport * from './picture_url_dialog';\nexport * from './utilities';\n","import { IPictureUtilsService } from '../utilities/IPictureUtils';\nimport { IPictureDataService, Attachment } from '../data';\n\n{\n    interface IPictureBindings {\n        [key: string]: any;\n\n        src: any;\n        pictureId: any;\n        pipPicture: any;\n        defaultIcon: any;\n        pipRebind: any;\n    }\n\n    const PictureBindings: IPictureBindings = {\n        src: '<?pipSrc',\n        pictureId: '<?pipPictureId',\n        pipPicture: '<?',\n        defaultIcon: '<?pipDefaultIcon',\n        pipRebind: '<?'\n    }\n\n    class PictureBindingsChanges implements ng.IOnChangesObject, IPictureBindings {\n        [key: string]: ng.IChangesObject<any>;\n\n        src: ng.IChangesObject<string>;\n        pictureId: ng.IChangesObject<string>;\n        pipPicture: ng.IChangesObject<Attachment>;\n        defaultIcon: ng.IChangesObject<string>;\n        pipRebind: ng.IChangesObject<boolean>;\n    }\n\n    class PictureController {\n        private imageElement: any;\n        private defaultBlock: any;\n\n        public src: string;\n        public pictureId: string;\n        public pipPicture: Attachment;\n        public defaultIcon: string;\n        public pipRebind: boolean;\n\n        private postLink: boolean = false;\n        public errorText: string;\n        constructor(\n            private $scope: ng.IScope,\n            private $rootScope: ng.IRootScopeService,\n            private $element: JQuery,\n            private pipPictureUtils: IPictureUtilsService,\n            private pipPictureData: IPictureDataService\n        ) {\n            \"ngInject\";\n\n            this.errorText = 'PICTURE_ERROR_LOAD';\n\n            // Add class\n            this.$element.addClass('pip-picture');\n        }\n\n        public $postLink() {\n            this.imageElement = this.$element.children('img');\n            this.defaultBlock = this.$element.children('div');\n            this.defaultIcon = this.defaultIcon ? this.defaultIcon : this.pipPictureData.DefaultErrorIcon;\n            this.postLink = true;\n            this.bindControl();\n        }\n\n        public $onChanges(changes: PictureBindingsChanges): void {\n            if (changes.pipRebind && changes.pipRebind.currentValue !== changes.pipRebind.previousValue) {\n                this.pipRebind = changes.pipRebind.currentValue;\n            }\n\n            let isDataChange: boolean = false;\n            if (this.pipRebind) {\n                if (changes.src && changes.src.currentValue !== changes.src.previousValue) {\n                    this.src = changes.src.currentValue;\n                    isDataChange = true;\n                }\n\n                if (changes.pictureId && changes.pictureId.currentValue !== changes.pictureId.previousValue) {\n                    this.pictureId = changes.pictureId.currentValue;\n                    isDataChange = true;\n                }\n\n                if (changes.pipPicture && !_.isEqual(changes.pipPicture.currentValue, changes.pipPicture.previousValue)) {\n                    this.pipPicture = changes.pipPicture.currentValue;\n                    isDataChange = true;\n                }\n\n                if (changes.defaultIcon && changes.defaultIcon.currentValue !== changes.defaultIcon.previousValue) {\n                    this.defaultIcon = changes.defaultIcon.currentValue;\n                    this.defaultIcon = this.defaultIcon ? this.defaultIcon : this.pipPictureData.DefaultErrorIcon;\n                }\n            }\n\n            if (isDataChange && this.postLink) {\n                this.bindControl();\n            }\n        }\n\n        // Clean up url to remove broken icon\n        public onImageError($event: JQueryEventObject): void {\n            if (this.pipPictureData.ShowErrorIcon) {\n                this.$scope.$apply(() => {\n                    this.imageElement.css('display', 'none');\n                    this.defaultBlock.css('display', 'block');\n                });\n            } else {\n                this.$scope.$apply(() => {\n                    this.defaultBlock.css('display', 'none');\n                });\n            }\n        }\n\n        // When image is loaded resize/reposition it\n        public onImageLoad($event: JQueryEventObject): void {\n            let image: any = $($event.target);\n            this.pipPictureUtils.setImageMarginCSS(this.$element, image);\n            this.$element.children('div').css('display', 'none');\n        }\n\n        public bindControl(): void {\n            let url;\n            if (this.pictureId) {\n                url = this.pipPictureData.getPictureUrl(this.pictureId);\n                this.imageElement.attr('src', url);\n            } else if (this.src) {\n                this.imageElement.attr('src', this.src);\n            } else if (this.pipPicture) {\n                url = this.pipPicture.uri ? this.pipPicture.uri : this.pipPictureData.getPictureUrl(this.pipPicture.id);\n                this.imageElement.attr('src', url);\n            }\n        }\n    }\n\n    const PictureComponent: ng.IComponentOptions = {\n        bindings: PictureBindings,\n        template: '<img ui-event=\"{ error: \\'$ctrl.onImageError($event)\\', load: \\'$ctrl.onImageLoad($event)\\' }\"/>'\n        + '<div class=\"pip-picture-error\"><md-icon md-svg-icon=\"icons:{{$ctrl.defaultIcon}}\"></md-icon><div class=\"pip-default-text\"><span>{{ $ctrl.errorText | translate }}</span></div></div>',\n        controller: PictureController\n    }\n\n    angular\n        .module('pipPicture', [])\n        .component('pipPicture', PictureComponent);\n}\n","import { IPictureUtilsService } from '../utilities/IPictureUtils';\nimport { PicturePaste } from '../utilities/PicturePaste';\nimport { IPictureDataService, Attachment } from '../data';\nimport { AddImageResult } from '../add_image/AddImageResult';\n\nexport class PictureEditControl {\n    public reset: (afterDeleting?: boolean) => void;\n    public save: (successCallback?: (response?: Attachment) => void, errorCallback?: (error?: any) => void) => void;\n    public abort: () => void;\n    public error?: any;\n\n    public disabled: boolean = false;\n    public url: string = '';\n    public uriData: any;\n    public uri: string;\n    public id: string;\n    public name: string;\n    public progress: number = 0;\n    public uploaded: boolean = false;\n    public uploading: boolean = false;\n    public upload: boolean = false;\n    public loaded: boolean = false;\n    public file: any = null;\n    public state: string = PictureStates.Original;\n}\n\nexport class PictureStates {\n    static Original: string = 'original';\n    static Copied: string = 'copied';\n    static Changed: string = 'changed';\n    static Deleted: string = 'deleted';\n    static Error: string = 'error';\n}\n\n{\n\n    const ConfigPictureEditTranslations = (pipTranslateProvider: pip.services.ITranslateProvider) => {\n        pipTranslateProvider.translations('en', {\n            ERROR_WRONG_IMAGE_FILE: 'Incorrect image file. Please, choose another one',\n            PICTURE_EDIT_TEXT: 'Click here to upload a picture',\n            PICTURE_ERROR_LOAD: 'Error image loading'\n        });\n        pipTranslateProvider.translations('ru', {\n            ERROR_WRONG_IMAGE_FILE: 'Неправильный файл с изображением. Выберете другой файл',\n            PICTURE_EDIT_TEXT: 'Нажмите сюда для загрузки картинки',\n            PICTURE_ERROR_LOAD: 'Ошибка загрузки картинки'\n        });\n    }\n\n\n    class SenderEvent {\n        sender: PictureEditControl;\n    }\n\n    class PictureEvent {\n        $event: SenderEvent;\n        $control: PictureEditControl;\n    }\n\n    interface IPictureEditBindings {\n        [key: string]: any;\n\n        ngDisabled: any;\n        pipCreated: any;\n        pipChanged: any;\n        pipPictureId: any;\n        pipPicture: any;\n        pipAddedPicture: any;\n        text: any;\n        icon: any;\n        pipRebind: any;\n    }\n\n    const PictureEditBindings: IPictureEditBindings = {\n        ngDisabled: '<?',\n        pipCreated: '&?',\n        pipChanged: '&?',\n        pipPictureId: '=?',\n        pipPicture: '=?',\n        pipAddedPicture: '&?',\n        text: '<?pipDefaultText',\n        icon: '<?pipDefaultIcon',\n        pipRebind: '<?',\n    }\n\n    class PictureEditBindingsChanges implements ng.IOnChangesObject, IPictureEditBindings {\n        [key: string]: ng.IChangesObject<any>;\n\n        ngDisabled: ng.IChangesObject<boolean>;\n        pipCreated: ng.IChangesObject<(params: PictureEvent) => ng.IPromise<void>>;\n        pipChanged: ng.IChangesObject<(params: PictureEvent) => ng.IPromise<void>>;\n        pipPictureId: ng.IChangesObject<string>;\n        pipPicture: ng.IChangesObject<Attachment>;\n        pipAddedPicture: ng.IChangesObject<() => boolean>;\n        text: ng.IChangesObject<string>;\n        icon: ng.IChangesObject<string>;\n        pipRebind: ng.IChangesObject<boolean>;\n    }\n\n    class PictureEditController {\n        private controlElement: any;\n        private inputElement: any;\n        private pipPicturePaste: PicturePaste;\n        private pictureStartState: string;\n\n        public ngDisabled: boolean;\n        public pipCreated: (params: PictureEvent) => void;\n        public pipChanged: (params: PictureEvent) => void;\n        public text: string;\n        public icon: string;\n        public pipPictureId: string;\n        public pipPicture: Attachment;\n        public pipAddedPicture: () => boolean;\n        public pipRebind: boolean;\n\n        public multiUpload: boolean;\n        public errorText: string;\n\n        public control: PictureEditControl;\n\n        constructor(\n            private $log: ng.ILogService,\n            private $scope: ng.IScope,\n            private $rootScope: ng.IRootScopeService,\n            private $element: JQuery,\n            private pipPictureData: IPictureDataService,\n            private pipPictureUtils: IPictureUtilsService,\n            private $timeout: ng.ITimeoutService,\n            private pipFileUpload: pip.files.IFileUploadService\n        ) {\n            \"ngInject\";\n            this.pipPicturePaste = new PicturePaste($timeout);\n            this.pictureStartState = this.pipAddedPicture ? PictureStates.Copied : PictureStates.Original;\n\n            this.text = this.text || 'PICTURE_EDIT_TEXT';\n            this.icon = this.icon || 'picture-no-border';\n            this.errorText = 'PICTURE_ERROR_LOAD';\n\n            this.multiUpload = false;\n\n            this.control = new PictureEditControl();\n            this.control.state = this.pictureStartState;\n            this.control.reset = (afterDeleting: boolean) => {\n                this.resetImage(afterDeleting);\n            }\n            this.control.save = (successCallback?: (response?: Attachment) => void, errorCallback?: (error?: any) => void): void => {\n                this.saveImage(successCallback, errorCallback);\n            }\n            this.control.abort = (): void => {\n                this.abort();\n            }\n            // Add class\n            $element.addClass('pip-picture-edit');\n        }\n\n        public $postLink() {\n            this.controlElement = this.$element.children('.pip-picture-upload');\n            this.inputElement = this.controlElement.children('input[type=file]');\n            // Initialize control\n            this.control.reset();\n\n            // Execute callback\n            if (this.pipCreated) {\n                this.pipCreated({\n                    $event: { sender: this.control },\n                    $control: this.control\n                });\n            }\n        }\n\n        public abort(): void {\n            if (this.control.uploading) {\n                this.control.uploaded = false;\n                this.control.uploading = false;\n                this.control.progress = 0;\n                this.control.upload = null;\n            }\n        }\n\n        public $onChanges(changes: PictureEditBindingsChanges): void {\n            if (changes.pipRebind && changes.pipRebind.currentValue !== changes.pipRebind.previousValue) {\n                this.pipRebind = changes.pipRebind.currentValue;\n            }\n\n            let change = false;\n\n            if (changes.ngDisabled && changes.ngDisabled.currentValue !== changes.ngDisabled.previousValue) {\n                this.ngDisabled = changes.ngDisabled.currentValue;\n                this.control.disabled = this.ngDisabled; // ???\n                if (this.inputElement) {\n                    this.inputElement.attr('disabled', this.control.disabled);\n                }\n            }\n\n            if (this.pipRebind) {\n                if (changes.pipPictureId && changes.pipPictureId.currentValue !== this.pipPictureId) {\n                    this.pipPictureId = changes.pipPictureId.currentValue;\n                    change = true;\n                }\n            }\n\n            if (this.pipRebind) {\n                if (changes.pipPicture && !_.isEqual(changes.pipPicture.currentValue, this.pipPicture)) {\n                    this.pipPicture = changes.pipPicture.currentValue;\n                    change = true;\n                }\n            }\n            if (change) {\n                this.control.reset();\n            }\n        }\n\n        public resetImage(afterDeleting: boolean): void {\n            this.control.progress = 0;\n            this.control.uploading = false;\n            this.control.uploaded = false;\n            this.control.file = null;\n            this.control.state = this.pictureStartState;\n            this.control.url = '';\n            this.control.uri = null;\n            this.control.name = null;\n            this.control.uriData = null;\n            this.control.id = null;\n            var url = '';\n            if (!afterDeleting) {\n                if (this.pipPictureId) {\n                    url = this.pipPictureData.getPictureUrl(this.pipPictureId);\n                } else if (this.pipPicture) {\n                    url = this.pipPicture.uri ? this.pipPicture.uri : this.pipPicture.id ? this.pipPictureData.getPictureUrl(this.pipPicture.id) : null;\n                    this.control.uri = this.pipPicture.uri;\n                    this.control.name = this.pipPicture.name;\n                    this.control.id = this.pipPicture.id;\n                }\n                if (!url) return;\n\n                this.control.url = url;\n                this.control.uploaded = true;\n                this.onChange();\n            } else {\n                this.onChange();\n            }\n        }\n\n        public onFocus(): void {\n            this.pipPicturePaste.addPasteListener((item) => {\n                this.readItemLocally(item.url, item.uriData, item.file, item.picture);\n            });\n        }\n\n        public onBlur(): void {\n            this.pipPicturePaste.removePasteListener();\n        };\n\n        public savePicture(successCallback?: (response?: Attachment) => void, errorCallback?: (error?: any) => void): void {\n            if (this.control.id) {\n                this.control.uploading = false;\n                this.pipPicture = {\n                    id: this.control.id,\n                    uri: this.control.uri,\n                    name: this.control.name\n                }\n                this.pictureStartState = PictureStates.Original;\n                this.control.reset();\n                if (successCallback) {\n                    successCallback(this.pipPicture);\n                }\n            }\n            else if (this.control.file !== null) {\n                this.control.uploading = true;\n                this.pipFileUpload.upload(\n                    this.control.file,\n                    this.pipPictureData.postPictureUrl(),\n                    (data: any, error: any) => {\n                        if (!error) {\n                            this.pipPictureId = data.id;\n                            this.pipPicture = {\n                                id: data.id,\n                                uri: null,\n                                name: data.name\n                            }\n                            this.pictureStartState = PictureStates.Original;\n                            this.control.reset();\n                            if (successCallback) {\n                                successCallback(this.pipPicture);\n                            }\n                        } else {\n                            this.control.uploading = false;\n                            this.control.upload = false;\n                            this.control.progress = 0;\n                            this.pictureStartState = PictureStates.Error;\n                            if (errorCallback) {\n                                errorCallback(error);\n                            } else {\n                                this.$log.error(error);\n                            }\n                        }\n                    },\n                    (state: pip.files.FileUploadState, progress: number) => {\n                        this.control.progress = progress;\n                    }\n                );\n            } else if (this.control.uri && this.pipPicture) {\n                this.control.uploading = false;\n                if (this.control.uri) {\n                    this.pipPicture = {\n                        id: this.control.id,\n                        uri: this.control.uri,\n                        name: this.control.name\n                    }\n                    this.pictureStartState = PictureStates.Original;\n                    this.control.reset();\n                    if (successCallback) {\n                        successCallback(this.pipPicture);\n                    }\n                }\n            }\n        }\n\n        public deletePicture(successCallback?: (response?: any) => void, errorCallback?: (error?: any) => void): void {\n            if (this.pipPictureId) {\n                this.pipPictureData.deletePicture(\n                    this.pipPictureId,\n                    () => {\n                        this.pipPictureId = null;\n                        this.control.reset(true);\n\n                        if (successCallback) successCallback();\n                    },\n                    (error: any) => {\n                        this.control.uploading = false;\n                        this.control.upload = false;\n                        this.control.progress = 0;\n                        this.control.state = PictureStates.Error;\n\n                        if (errorCallback) {\n                            errorCallback(error);\n                        } else {\n                            this.$log.error(error);\n                        }\n                    });\n            } else {\n                this.control.uploading = false;\n                this.pipPicture = {\n                    id: null,\n                    uri: null,\n                    name: null\n                }\n\n                this.control.reset(true);\n                if (successCallback) successCallback(this.pipPicture);\n            }\n        }\n\n        public saveImage(successCallback?: (response?: any) => void, errorCallback?: (error?: any) => void): void {\n            // Process changes of the image\n            if (this.control.state == PictureStates.Changed) {\n                this.savePicture(successCallback, errorCallback);\n            }\n            // Process deletion of the image\n            else if (this.control.state == PictureStates.Deleted) {\n                this.deletePicture(successCallback, errorCallback);\n            }\n            // Process copied of the image\n            else if (this.control.state == PictureStates.Copied) {\n                this.pipPicture = {\n                    id: this.control.id,\n                    name: this.control.name,\n                    uri: this.control.uri\n                }\n                this.pictureStartState = PictureStates.Original;\n                this.control.reset();\n                successCallback(this.pipPicture);\n            }\n            // Process if no changes were made\n            else {\n                if (successCallback) {\n                    if (this.pipPicture) {\n                        successCallback(this.pipPicture);\n                    } else {\n                        successCallback(this.pipPictureId);\n                    }\n                }\n            }\n        }\n\n        // Visual publics\n        public empty(): boolean {\n            return (this.control.url == '' && !this.control.uploading);\n        }\n\n        public isUpdated(): boolean {\n            return this.control.state != PictureStates.Original;\n        }\n\n        // Process user events\n        public readItemLocally(url, uriData, file, picture): void {\n            if (picture) {\n                this.control.file = null;\n                this.control.name = picture.name;\n                this.control.uri = picture.uri;\n                this.control.id = picture.id;\n                this.control.uriData = null;\n                this.control.url = picture.uri ? picture.uri : picture.id ? this.pipPictureData.getPictureUrl(picture.id) : '';\n                this.control.state == PictureStates.Copied\n            } else {\n                this.control.file = file;\n                this.control.name = file ? file.name : url ? url.split('/').pop() : null;\n                this.control.url = !file && url ? url : uriData ? uriData : '';\n                this.control.uri = !file && url ? url : null;\n                this.control.uriData = uriData;\n                this.control.id = null;\n                this.control.state = PictureStates.Changed;\n            }\n            this.onChange();\n        }\n\n        public onDeleteClick($event: JQueryEventObject): void {\n            $event.stopPropagation();\n\n            this.controlElement.focus();\n\n            this.control.file = null;\n            this.control.url = '';\n            this.control.uri = null;\n            this.control.uriData = null;\n            this.control.name = null;\n            this.control.id = null;\n            if (this.control.state != PictureStates.Copied) this.control.state = PictureStates.Deleted;\n\n            this.onChange();\n        }\n\n        public onKeyDown($event: KeyboardEvent): void {\n            if ($event.keyCode == 13 || $event.keyCode == 32) {\n                // !! Avoid clash with $apply()\n                setTimeout(() => {\n                    this.controlElement.trigger('click');\n                }, 0);\n            } else if ($event.keyCode == 46 || $event.keyCode == 8) {\n                this.control.file = null;\n                this.control.url = '';\n                this.control.state = PictureStates.Deleted;\n                this.onChange();\n            } else if ($event.keyCode == 27) {\n                this.control.reset();\n            }\n        }\n\n        // Clean up url to remove broken icon\n        public onImageError($event: JQueryEventObject): void {\n            this.$scope.$apply(() => {\n                this.control.url = '';\n                let image = $($event.target);\n                this.control.state = PictureStates.Error;\n                this.pipPictureUtils.setErrorImageCSS(image, { width: 'auto', height: '100%' });\n            });\n        }\n\n        // When image is loaded resize/reposition it\n        public onImageLoad($event): void {\n            let image = $($event.target);\n            let container: any = {}; //JQuery = _.cloneDeep(this.controlElement);\n            container.clientWidth = 80;\n            container.clientHeight = 80;\n            this.pipPictureUtils.setImageMarginCSS(container, image);\n            this.control.uploading = false;\n        }\n\n        // On change event\n        public onChange(): void {\n            if (this.pipChanged) {\n                this.pipChanged({\n                    $event: { sender: this.control },\n                    $control: this.control\n                });\n            }\n        }\n\n    }\n\n    const PictureEditComponent: ng.IComponentOptions = {\n        bindings: PictureEditBindings,\n        templateUrl: 'picture_edit/PictureEdit.html',\n        controller: PictureEditController\n    }\n\n    angular\n        .module('pipPictureEdit', ['ui.event', 'pipPicturePaste',\n            'pipTranslate', 'angularFileUpload', 'pipPictures.Templates'])\n        .config(ConfigPictureEditTranslations)\n        .component('pipPictureEdit', PictureEditComponent);\n}\n\n","import { IPictureUtilsService } from '../utilities/IPictureUtils';\nimport { PicturePaste } from '../utilities/PicturePaste';\nimport { IPictureDataService, Attachment, BlobInfo } from '../data';\n\nlet async = require('async');\n\nexport class PictureListEditItem {\n    public pin: number;\n    public id: string;\n    public uri: string;\n    public name: string;\n    public url: string;\n    public uriData: any;\n    public uploading: boolean;\n    public uploaded: boolean;\n    public progress: number;\n    public file: any;\n    public upload?: any;\n    public state: string;\n    public loaded?: boolean;\n}\n\nexport class PictureListEditControl {\n    public uploading: number = 0;\n    public items: PictureListEditItem[];\n    public reset: () => void;\n    public save: (successCallback?: (data?: Attachment[]) => void, errorCallback?: (error?: PictureUploadErrors[]) => void) => void;\n    public abort: () => void;\n    public error?: any;\n}\n\n\nexport class PictureListEditStates {\n    static Added: string = 'added';\n    static Original: string = 'original';\n    static Copied: string = 'copied';\n    static Changed: string = 'changed';\n    static Deleted: string = 'deleted';\n    static Error: string = 'error';\n}\n\nexport class PictureUploadErrors {\n    id: string;\n    uri: string;\n    name: string;\n}\n\n{\n\n    const ConfigPictureListEditTranslations = (pipTranslateProvider: pip.services.ITranslateProvider) => {\n        pipTranslateProvider.translations('en', {\n            'PICTURE_LIST_EDIT_TEXT': 'Click here to add a picture',\n            'ERROR_TRANSACTION_IN_PROGRESS': 'Transaction is in progress. Please, wait until it is finished or abort',\n            'ERROR_IMAGE_PRELOADING': 'Image loading error. The picture can not be saved'\n        });\n        pipTranslateProvider.translations('ru', {\n            'PICTURE_LIST_EDIT_TEXT': 'Нажмите сюда чтобы добавить картинку',\n            'ERROR_TRANSACTION_IN_PROGRESS': 'Транзакция еще не завершена. Подождите окончания или прервите её',\n            'ERROR_IMAGE_PRELOADING': 'Ошибка при загрузки картинки. Картинка не сохранена.'\n        });\n    }\n\n\n    class SenderEvent {\n        sender: PictureListEditControl;\n    }\n\n    class PictureEvent {\n        $event: SenderEvent;\n        $control: PictureListEditControl;\n    }\n\n    interface IPictureListEditBindings {\n        [key: string]: any;\n\n        ngDisabled: any;\n        pipCreated: any;\n        pipChanged: any;\n        pictures: any;\n        pipAddedPicture: any;\n        text: any;\n        icon: any;\n        pipRebind: any;\n    }\n\n    const PictureListEditBindings: IPictureListEditBindings = {\n        ngDisabled: '<?',\n        pipCreated: '&?',\n        pipChanged: '&?',\n        pictures: '=?pipPictures',\n        pipAddedPicture: '&?',\n        text: '<?pipDefaultText',\n        icon: '<?pipDefaultIcon',\n        pipRebind: '<?',\n    }\n\n    class PictureListEditBindingsChanges implements ng.IOnChangesObject, IPictureListEditBindings {\n        [key: string]: ng.IChangesObject<any>;\n\n        ngDisabled: ng.IChangesObject<boolean>;\n        pipCreated: ng.IChangesObject<(params: PictureEvent) => ng.IPromise<void>>;\n        pipChanged: ng.IChangesObject<(params: PictureEvent) => ng.IPromise<void>>;\n        pictures: ng.IChangesObject<Attachment[]>;\n        pipAddedPicture: ng.IChangesObject<() => boolean>;\n        text: ng.IChangesObject<string>;\n        icon: ng.IChangesObject<string>;\n        pipRebind: ng.IChangesObject<boolean>;\n    }\n\n    class PictureListEditController {\n        private controlElement: any;\n        private pipPicturePaste: PicturePaste;\n        private pictureStartState: string;\n        private cancelQuery: any;\n\n        public ngDisabled: boolean;\n        public pipCreated: (params: PictureEvent) => void;\n        public pipChanged: (params: PictureEvent) => void;\n        public text: string;\n        public icon: string;\n        public pictures: Attachment[];\n        public pipAddedPicture: () => boolean;\n        public pipRebind: boolean;\n\n        public control: PictureListEditControl;\n        private itemPin: number;\n        private errorText: string;\n\n        constructor(\n            private $log: ng.ILogService,\n            private $scope: ng.IScope,\n            private $rootScope: ng.IRootScopeService,\n            private $element: JQuery,\n            private pipPictureUtils: IPictureUtilsService,\n            private $timeout: ng.ITimeoutService,\n            private pipFileUpload: pip.files.IFileUploadService,\n            private pipRest: pip.rest.IRestService,\n            private pipPictureData: IPictureDataService\n        ) {\n            \"ngInject\";\n\n            this.itemPin = 0;\n            this.pipPicturePaste = new PicturePaste($timeout);\n            this.pictureStartState = this.toBoolean(this.pipAddedPicture) ? PictureListEditStates.Copied : PictureListEditStates.Original;\n\n            this.text = this.text || 'PICTURE_LIST_EDIT_TEXT';\n            this.icon = this.icon || 'picture-no-border';\n            this.errorText = 'PICTURE_ERROR_LOAD';\n\n            this.control = new PictureListEditControl();\n            this.control.uploading = 0;\n            this.control.items = [];\n            this.control.reset = () => {\n                this.reset();\n            }\n            this.control.save = (successCallback?: (data?: Attachment[]) => void, errorCallback?: (error?: PictureUploadErrors[]) => void): void => {\n                this.save(successCallback, errorCallback);\n            }\n            this.control.abort = (): void => {\n                this.abort();\n            }\n            // Add class\n            $element.addClass('pip-picture-list-edit');\n        }\n\n        private toBoolean(value: any): boolean {\n            if (value == null) {\n                return false;\n            }\n            if (!value) {\n                return false;\n            }\n            value = value.toString().toLowerCase();\n\n            return value == '1' || value == 'true';\n        }\n\n        public filterItem(item: PictureListEditItem): boolean {\n            return item.state != PictureListEditStates.Deleted;\n        }\n\n        public $postLink() {\n            this.controlElement = this.$element.find('.pip-picture-drop')\n\n            // Initialize control\n            this.control.reset();\n            // Execute callback\n            if (this.pipCreated) {\n                this.pipCreated({\n                    $event: { sender: this.control },\n                    $control: this.control\n                });\n            }\n        }\n\n        private removeItem(item: PictureListEditItem): void {\n            if (item.state === PictureListEditStates.Added || item.state === PictureListEditStates.Copied) {\n                let index = _.findIndex(this.control.items, { pin: item.pin });\n                if (index > -1) {\n                    this.control.items.splice(index, 1);\n                }\n            } else {\n                item.state = PictureListEditStates.Deleted;\n            }\n        }\n\n        public $onChanges(changes: PictureListEditBindingsChanges): void {\n            if (changes.pipRebind && changes.pipRebind.currentValue !== changes.pipRebind.previousValue) {\n                this.pipRebind = changes.pipRebind.currentValue;\n            }\n\n            if (changes.ngDisabled && changes.ngDisabled.currentValue !== changes.ngDisabled.previousValue) {\n                this.ngDisabled = changes.ngDisabled.currentValue;\n            }\n\n            if (this.pipRebind) {\n                if (changes.pictures && !_.isEqual(changes.pictures.currentValue, this.pictures)) {\n                    this.pictures = changes.pictures.currentValue;\n                    this.control.reset();\n                }\n            }\n\n            this.pictures = this.pictures ? this.pictures : [];\n        }\n\n        public onImageError($event: JQueryEventObject, item: PictureListEditItem): void {\n\n            item.state = PictureListEditStates.Error;\n            item.url = '';\n        }\n\n        public onFocus(): void {\n            this.pipPicturePaste.addPasteListener((item) => {\n                this.readItemLocally(item.url, item.uriData, item.file, item.picture);\n            });\n        }\n\n        public onBlur(): void {\n            this.pipPicturePaste.removePasteListener();\n        }\n\n        public getItems(): PictureListEditItem[] {\n            let items: PictureListEditItem[] = [];\n            let i: number;\n\n            if (this.pictures == null || this.pictures.length == 0) {\n                return items;\n            }\n\n            for (i = 0; i < this.pictures.length; i++) {\n                let newItem: PictureListEditItem = {\n                    pin: this.itemPin++,\n                    id: this.pictures[i].id,\n                    name: this.pictures[i].name,\n                    uri: this.pictures[i].uri,\n                    uriData: null,\n                    uploading: false,\n                    uploaded: false,\n                    progress: 0,\n                    file: null,\n                    url: this.pictures[i].id ? this.pipPictureData.getPictureUrl(this.pictures[i].id) : this.pictures[i].uri,\n                    state: this.pictureStartState\n                };\n                items.push(newItem);\n            }\n\n            return items;\n        }\n\n        public setItems(): void {\n            let i: number;\n\n            // Clean the array\n            if (this.pictures && this.pictures.length > 0) {\n                this.pictures.splice(0, this.pictures.length);\n            }\n            for (i = 0; i < this.control.items.length; i++) {\n                let item = this.control.items[i];\n                if ((item.id || item.uri) && item.state != PictureListEditStates.Deleted) {\n                    let newPic: Attachment = {\n                        id: item.id,\n                        name: item.name,\n                        uri: item.uri\n                    };\n                    this.pictures.push(newPic);\n                }\n            }\n        }\n\n        public reset(): void {\n            if (!this.controlElement) { return }\n            this.control.uploading = 0;\n            this.control.items = this.getItems();\n        }\n\n        private addItem(oldItem: PictureListEditItem, fileInfo: BlobInfo, error: any) {\n            let itemIndex = _.findIndex(this.control.items, { pin: oldItem.pin });\n            if (itemIndex < 0) return;\n            if (error) {\n                this.control.items[itemIndex].uploaded = false;\n                this.control.items[itemIndex].uploading = false;\n                this.control.items[itemIndex].progress = 0;\n                this.control.items[itemIndex].upload = null;\n                this.control.items[itemIndex].state = PictureListEditStates.Error;\n            } else {\n                if (fileInfo) {\n                    this.control.items[itemIndex].id = fileInfo.id;\n                    this.control.items[itemIndex].name = fileInfo.name;\n                    this.control.items[itemIndex].uploaded = true;\n                    this.control.items[itemIndex].state = PictureListEditStates.Original;\n                } else {\n                    this.control.items[itemIndex].uploaded = false;\n                }                \n                this.control.items[itemIndex].uploading = false;\n                this.control.items[itemIndex].uriData = null;\n                this.control.items[itemIndex].progress = 0;\n                this.control.items[itemIndex].upload = null;\n                this.control.items[itemIndex].file = null;\n            }\n        }\n\n        public deleteItem(item: PictureListEditItem, callback?: (data?: any) => void): void {\n            // Avoid double transactions\n            if (item.upload) {\n                item.upload.abort();\n                item.upload = null;\n            }\n\n            if (item.state != PictureListEditStates.Deleted) {\n                return;\n            }\n\n            this.removeItem(item);\n            callback();\n\n        }\n\n        public save(successCallback?: (data: Attachment[]) => void, errorCallback?: (errors?: any) => void): void {\n            let item: PictureListEditItem;\n            let onItemCallback: (error: any) => void;\n            let i: number;\n\n            if (this.control.uploading) {\n                if (errorCallback) {\n                    errorCallback('ERROR_TRANSACTION_IN_PROGRESS');\n                }\n\n                return;\n            }\n\n            this.cancelQuery = null;\n            this.control.error = null;\n            this.control.uploading = 0;\n\n            let addedBlobCollection = [];\n            let addedUrlCollection = [];\n\n            _.each(this.control.items, (item) => {\n                if (item.state == 'added') {\n                    if (item.file) {\n                        addedBlobCollection.push(item);\n                    } else {\n                        addedUrlCollection.push(item);\n                    }\n                }\n            });\n\n\n            let deletedCollection = _.filter(this.control.items, { state: 'deleted' });\n\n            // process addedUrlCollection\n            _.each(addedUrlCollection, (item) => {\n                item.uploaded = true;\n                item.uploading = false;\n                item.progress = 0;\n                item.upload = null;\n                item.uriData = null;\n                item.file = null;\n                item.state = PictureListEditStates.Original;\n            });\n\n            if (!addedBlobCollection.length && !deletedCollection.length) {\n                // do nothing\n                if (addedUrlCollection.length > 0) {\n                    this.setItems();\n                }\n                this.control.uploading = 0;\n                if (successCallback) {\n                    successCallback(this.pictures);\n                }\n\n                return;\n            }\n\n            this.control.uploading = addedBlobCollection.length + deletedCollection.length;\n            async.parallel([\n                (callbackAll) => {\n                    // add documents\n                    _.each(addedBlobCollection, (item) => {\n                        item.uploading = true;\n                        item.progress = 0;\n                    });\n                    this.pipFileUpload.multiUpload(\n                        this.pipPictureData.postPictureUrl(),\n                        addedBlobCollection,\n                        (index: number, data: BlobInfo, err: any) => {\n                            let item = addedBlobCollection[index];\n                            this.addItem(item, data, err);\n                            if (err) {\n                                this.control.error = true;\n                            }\n                        },\n                        (index: number, state: pip.files.FileUploadState, progress: number) => {\n                            // update item progress \n                            let item = addedBlobCollection[index];\n                            item.progress = progress;\n                        },\n                        (error: any, result: any, res: any) => {\n                            // reset upload abort\n                            this.cancelQuery = null;\n                            callbackAll();\n                        },\n                        (cancelQuery: any) => {\n                            this.cancelQuery = cancelQuery;\n                        },\n                        false,\n                        'pin'\n                    );\n                },\n                (callbackAll) => {\n                    // delete documents\n                    if (deletedCollection.length) {\n                        async.each(deletedCollection,\n                            (item, callback) => {\n                                this.deleteItem(item, (error: any) => { callback() });\n                            },\n                            (error, result) => {\n                                callbackAll();\n                            });\n                    } else {\n                        callbackAll();\n                    }\n\n                }\n            ],\n                // optional callback\n                (error, results) => {\n                    if (error && !this.control.error) {\n                        this.control.error = error;\n                    }\n                    if (this.control.error) {\n                        this.control.uploading = 0;\n                        let errors = this.getUploadErors();\n                        if (errorCallback) {\n                            errorCallback(errors);\n                        } else {\n                            this.$log.error(errors);   // eslint-disable-line no-console\n                        }\n                    } else {\n                        this.setItems();\n                        this.control.uploading = 0;\n                        if (successCallback) {\n                            successCallback(this.pictures);\n                        }\n                    }\n                });\n        }\n\n        private getUploadErors(): PictureUploadErrors[] {\n            let errors: PictureUploadErrors[] = [];\n\n            _.each(this.control.items, (item: PictureListEditItem) => {\n                if (item.state == PictureListEditStates.Error || item.state == PictureListEditStates.Error) {\n                    errors.push({\n                        id: item.id,\n                        uri: item.uri,\n                        name: item.name\n                    })\n                }\n            });\n\n            return errors;\n        }\n\n        public abort(): void {\n            let i: number;\n\n            for (i = 0; i < this.control.items.length; i++) {\n                let item: PictureListEditItem = this.control.items[i];\n\n                if (item.uploading) {\n                    if (item.upload) {\n                        item.upload.abort();\n                    }\n                    item.uploaded = false;\n                    item.uploading = false;\n                    item.progress = 0;\n                    item.upload = null;\n                }\n            }\n\n            // abort upload\n            if (this.cancelQuery) {\n                this.cancelQuery.resolve();\n            }\n\n            // Abort transaction\n            this.control.uploading = 0;\n            this.control.error = true;\n        }\n\n        public readItemLocally(url, uriData, file, picture): void {\n            let item: PictureListEditItem = new PictureListEditItem();\n            item.pin = this.itemPin++;\n            item.uploading = false;\n            item.uploaded = false;\n            item.progress = 0;\n\n            if (picture) {\n                item.file = null;\n                item.name = picture.name;\n                item.uri = picture.uri;\n                item.id = picture.id;\n                item.uriData = null;\n                item.url = picture.uri ? picture.uri : picture.id ? this.pipPictureData.getPictureUrl(picture.id) : '';\n                item.state == PictureListEditStates.Copied\n            } else {\n                item.file = file;\n                item.name = file ? file.name : url ? url.split('/').pop() : null;\n                item.url = !file && url ? url : uriData ? uriData : '';\n                item.uri = !file && url ? url : null;\n                item.uriData = uriData;\n                item.id = null;\n                item.state = PictureListEditStates.Added;\n            }\n            this.control.items.push(item);\n            this.onChange();\n        }\n\n        public onSelectClick($files: any): void {\n            let i: number;\n            this.controlElement.focus();\n\n            if ($files == null || $files.length == 0) { return; }\n            for (i = 0; i < $files.length; i++) {\n                let file: any = $files[i];\n\n                if (file.type.indexOf('image') > -1) {\n                    this.readItemLocally('', null, file, null);\n                }\n            }\n        }\n\n        public onDeleteClick(item: PictureListEditItem): void {\n            this.removeItem(item);\n\n            this.onChange();\n        }\n\n        public onKeyDown($event: KeyboardEvent, item: PictureListEditItem): void {\n            if (item) {\n                if ($event.keyCode == 46 || $event.keyCode == 8) {\n                    if (item.state == PictureListEditStates.Added) {\n                        this.removeItem(item);\n                    } else {\n                        item.state = PictureListEditStates.Deleted;\n                    }\n\n                    this.onChange();\n                }\n            } else {\n                if ($event.keyCode == 13 || $event.keyCode == 32) {\n                    // !! Avoid clash with $apply()\n                    setTimeout(() => {\n                        this.controlElement.trigger('click');\n                    }, 0);\n                }\n            }\n        }\n\n        public onImageLoad($event: JQueryEventObject, item: PictureListEditItem): void {\n            setTimeout(() => {\n                let image = $($event.target);\n                let container: any = {};\n                container.clientWidth = 80;\n                container.clientHeight = 80;\n                this.pipPictureUtils.setImageMarginCSS(container, image);\n            }, 250);\n\n            item.loaded = true;\n        }\n\n        // On change event\n        public onChange() {\n            if (this.pipChanged) {\n                this.pipChanged({\n                    $event: { sender: this.control },\n                    $control: this.control\n                });\n            }\n        }\n\n    }\n\n    const PictureListEditComponent: ng.IComponentOptions = {\n        bindings: PictureListEditBindings,\n        templateUrl: 'picture_list_edit/PictureListEdit.html',\n        controller: PictureListEditController\n    }\n\n    angular\n        .module('pipPictureListEdit', ['ui.event', 'pipPicturePaste',\n            'pipFocused', 'angularFileUpload', 'pipPictures.Templates'])\n        .config(ConfigPictureListEditTranslations)\n        .component('pipPictureListEdit', PictureListEditComponent);\n}\n","﻿// import pipPictureUtils\n\nconst ConfigPictureUrlDialogTranslations = (pipTranslateProvider: pip.services.ITranslateProvider) => {\n    pipTranslateProvider.translations('en', {\n        'PICTURE_FROM_WEBLINK': 'Add from web link',\n        'LINK_PICTURE': 'Link to the picture...'\n    });\n    pipTranslateProvider.translations('ru', {\n        'PICTURE_FROM_WEBLINK': 'Добавить из веб ссылки',\n        'LINK_PICTURE': 'Ссылка на изображение...'\n    });\n}\n\nclass PictureUrlDialogController {\n    public url: string = '';\n    public invalid: boolean = true;\n    public theme: string;\n\n    constructor(\n        private $log: ng.ILogService,\n        private $scope: ng.IScope,\n        private $mdDialog: angular.material.IDialogService,\n        private $rootScope: ng.IRootScopeService,\n        private $timeout: ng.ITimeoutService,\n        private $mdMenu,\n        private pipPictureUtils\n    ) {\n        \"ngInject\";\n\n        this.theme = this.$rootScope[pip.themes.ThemeRootVar];\n    }\n\n    public setImageSize(img: any): void {\n        let imageWidth: number = img.width();\n        let imageHeight: number = img.height();\n\n        let cssParams = {};\n\n        if ((imageWidth) > (imageHeight)) {\n            cssParams['width'] = '250px';\n            cssParams['height'] = 'auto';\n        } else {\n            cssParams['width'] = 'auto';\n            cssParams['height'] = '250px';\n        }\n\n        img.css(cssParams);\n    }\n\n    public checkUrl(): void {\n        let img = $(\"img#url_image\")\n            .on('error', () => {\n                this.invalid = true;\n                this.$scope.$apply();\n                \n            })\n            .on('load', (e) => {\n                this.invalid = false;\n                this.setImageSize(img);\n                this.$scope.$apply();\n            })\n            .attr(\"src\", this.url);\n    };\n\n    public onCancelClick(): void {\n        this.$mdDialog.cancel();\n    };\n\n    public onAddClick(): void {\n        this.$mdDialog.hide(this.url);\n    };\n\n}\n\nangular\n    .module('pipPictureUrlDialog')\n    .config(ConfigPictureUrlDialogTranslations)\n    .controller('pipPictureUrlDialogController', PictureUrlDialogController);\n\n","import { IPictureUrlDialogService } from './IPictureUrlDialogService';\n\nclass PictureUrlDialogService implements IPictureUrlDialogService {\n    private _mdDialog: angular.material.IDialogService;\n\n    constructor($mdDialog: angular.material.IDialogService) {\n        this._mdDialog = $mdDialog;\n    }\n\n    public show(successCallback?: (result) => void, cancelCallback?: () => void) {\n        this._mdDialog.show({\n            templateUrl: 'picture_url_dialog/PictureUrlDialog.html',\n            clickOutsideToClose: true,\n            controller: 'pipPictureUrlDialogController',\n            controllerAs: '$ctrl'\n        })\n        .then(\n            (result) => {\n                if (successCallback) {\n                    successCallback(result);\n                }\n            });\n    }\n}\n\nangular\n    .module('pipPictureUrlDialog')\n    .service('pipPictureUrlDialog', PictureUrlDialogService);\n\n","angular\n    .module('pipPictureUrlDialog',\n        ['ngMaterial', 'pipPictures.Templates']);\n\nimport './IPictureUrlDialogService';\nimport './PictureUrlDialogService';\nimport './PictureUrlDialogController';\n\n\nexport * from './IPictureUrlDialogService';\n","// configured Rest resource\nfunction configAvatarResources(pipRestProvider: pip.rest.IRestProvider) {\n    pipRestProvider.registerOperation('avatars', '/api/1.0/avatars/:avatar_id');\n}\n\nangular\n    .module('pipPictures.Rest')\n    .config(configAvatarResources);\n\n\n","// configured Rest resource\nfunction configImageSetResources(pipRestProvider: pip.rest.IRestProvider) {\n    pipRestProvider.registerPagedCollection('imagesets', '/api/1.0/imagesets/:imageset_id',\n        { imageset_id: '@imageset_id' },\n        {\n            page: {method: 'GET', isArray: false},\n            update: { method: 'PUT' }\n        });\n}\n\nangular\n    .module('pipPictures.Rest')\n    .config(configImageSetResources);","// configured Rest resource\nfunction configPictureResources(pipRestProvider: pip.rest.IRestProvider) {\n    pipRestProvider.registerPagedCollection('picture', '/api/1.0/blobs/:picture_id',\n        { blob_id: '@picture_id' },\n        {\n            page: { method: 'GET', isArray: false },\n            update: { method: 'PUT' }\n        });\n    pipRestProvider.registerResource('picturesInfo', '/api/1.0/blobs/:picture_id/info');\n}\n\nangular\n    .module('pipPictures.Rest')\n    .config(configPictureResources);\n\n\n","\n\nangular\n    .module('pipPictures.Rest', []);\n\nimport './PictureResources';\nimport './ImageSetResources';\nimport './AvatarResources';\n","export class imageCssParams {\n    public 'width'?: string;\n    public 'margin-left'?: string;\n    public 'height'?: string;\n    public 'margin-top'?: string;\n}\n\nexport interface IPictureUtilsService {\n    getCollageSchemes(): any;\n    setErrorImageCSS(image: any, params?: imageCssParams): void;\n    setImageMarginCSS($element: any, image: any, params?: imageCssParams): void;\n    setIconMarginCSS(container: any, icon: any): void;\n}\n\nexport interface IPictureUtilsProvider extends ng.IServiceProvider {\n\n}\n\n","export class PicturePaste {\n    private pasteCatcher;\n\n    constructor(\n        private $timeout: ng.ITimeoutService\n    ) {\n        \"ngInject\";\n    }\n\n    public addPasteListener(onPaste) {\n        if (!window['Clipboard']) {\n            if (this.pasteCatcher !== null && this.pasteCatcher !== undefined) {\n                this.removePasteListener();\n            }\n\n            this.pasteCatcher = document.createElement(\"div\");\n\n            // Firefox allows images to be pasted into contenteditable elements\n            this.pasteCatcher.setAttribute(\"contenteditable\", \"true\");\n\n            // We can hide the element and append it to the body,\n            //this.pasteCatcher.style.opacity = 0;\n            $(this.pasteCatcher).css({\n                \"position\": \"absolute\",\n                \"left\": \"-999\",\n                width: \"0\",\n                height: \"0\",\n                \"overflow\": \"hidden\",\n                outline: 0\n            });\n\n            document.body.appendChild(this.pasteCatcher);\n        }\n\n        $(document).on('paste', (event) => {\n            let localEvent;\n            if (event['clipboardData'] == null && event.originalEvent) {\n                localEvent = event.originalEvent;\n            } else {\n                localEvent = event;\n            }\n\n            // Paste for chrome\n            if (localEvent.clipboardData) {\n                var items = localEvent.clipboardData.items;\n\n                _.each(items, (item) => {\n                    if (item.type.indexOf(\"image\") != -1) {\n                        var file = item.getAsFile();\n\n                        var fileReader = new FileReader();\n                        fileReader.onload = (e) => {\n                            this.$timeout(() => {\n                                onPaste({ url: e.target['result'], file: file });\n                            });\n                        };\n                        fileReader.readAsDataURL(file);\n                    }\n                });\n            }\n            // Paste for IE\n            else if (window['clipboardData'] && window['clipboardData'].files) {\n                _.each(window['clipboardData'].files, (file) => {\n                    var fileReader = new FileReader();\n                    fileReader.onload = (e) => {\n                        this.$timeout(() => {\n                            onPaste({ url: e.target['result'], file: file });\n                        });\n                    };\n                    fileReader.readAsDataURL(file);\n                });\n            }\n        });\n\n\n    }\n\n    public removePasteListener() {\n        if (!window['Clipboard']) {\n            if (this.pasteCatcher !== null && this.pasteCatcher !== undefined) {\n                document.body.removeChild(this.pasteCatcher);\n                this.pasteCatcher = null;\n            }\n        }\n        $(document).off('paste');\n    }\n\n}\n\nangular\n    .module('pipPicturePaste', []);\n","import { IPictureUtilsService, IPictureUtilsProvider, imageCssParams } from './IPictureUtils';\n\nlet collageSchemes = [\n    // 1\n    [\n        { flex: 100, fullWidth: true, fullHeight: true }\n    ],\n    // 2\n    [\n        {\n            group: true,\n            layout: 'row',\n            flex: 100,\n            fullHeight: true,\n            children: [\n                { flex: 50, fullHeight: true, rightPadding: true },\n                { flex: 50, fullHeight: true, leftPadding: true }\n            ]\n        }\n    ],\n    // 3\n    [\n        {\n            group: true,\n            layout: 'row',\n            flex: 100,\n            fullHeight: true,\n            children: [\n                { flex: 33, fullHeight: true, rightPadding: true },\n                { flex: 33, fullHeight: true, leftPadding: true, rightPadding: true },\n                { flex: 33, fullHeight: true, leftPadding: true }\n            ]\n        },\n        {\n            group: true,\n            layout: 'row',\n            flex: 100,\n            fullHeight: true,\n            children: [\n                { flex: 50, fullHeight: true, rightPadding: true },\n                {\n                    group: true,\n                    layout: 'column',\n                    flex: 50,\n                    fullHeight: true,\n                    children: [\n                        { flex: 50, leftPadding: true, bottomPadding: true },\n                        { flex: 50, leftPadding: true, topPadding: true }\n                    ]\n                }\n            ]\n        },\n        {\n            group: true,\n            layout: 'row',\n            flex: 100,\n            fullHeight: true,\n            children: [\n                { flex: 70, fullHeight: true, rightPadding: true },\n                {\n                    group: true,\n                    layout: 'column',\n                    flex: 30,\n                    fullHeight: true,\n                    children: [\n                        { flex: 50, leftPadding: true, bottomPadding: true },\n                        { flex: 50, leftPadding: true, topPadding: true }\n                    ]\n                }\n            ]\n        },\n        {\n            group: true,\n            layout: 'column',\n            flex: 100,\n            fullHeight: true,\n            children: [\n                { flex: 50, fullWidth: true, bottomPadding: true },\n                {\n                    group: true,\n                    layout: 'row',\n                    flex: 50,\n                    fullHeight: true,\n                    children: [\n                        { flex: 50, rightPadding: true, topPadding: true },\n                        { flex: 50, leftPadding: true, topPadding: true }\n                    ]\n                }\n            ]\n        }\n    ],\n    // 4\n    [\n        {\n            group: true,\n            layout: 'column',\n            flex: 100,\n            fullHeight: true,\n            children: [\n                {\n                    group: true,\n                    layout: 'row',\n                    flex: 50,\n                    fullHeight: true,\n                    children: [\n                        { flex: 50, fullWidth: true, rightPadding: true, bottomPadding: true },\n                        { flex: 50, fullWidth: true, leftPadding: true, bottomPadding: true }\n                    ]\n                },\n                {\n                    group: true,\n                    layout: 'row',\n                    flex: 50,\n                    fullHeight: true,\n                    children: [\n                        { flex: 50, fullWidth: true, rightPadding: true, topPadding: true },\n                        { flex: 50, fullWidth: true, leftPadding: true, topPadding: true }\n                    ]\n                }\n            ]\n        },\n        {\n            group: true,\n            layout: 'row',\n            flex: 100,\n            fullHeight: true,\n            children: [\n                { flex: 50, fullWidth: true, rightPadding: true },\n                {\n                    group: true,\n                    layout: 'column',\n                    flex: 50,\n                    fullHeight: true,\n                    children: [\n                        { flex: 50, fullWidth: true, leftPadding: true, bottomPadding: true },\n                        {\n                            group: true,\n                            layout: 'row',\n                            flex: 50,\n                            fullHeight: true,\n                            children: [\n                                { flex: 50, fullWidth: true, leftPadding: true, rightPadding: true, topPadding: true },\n                                { flex: 50, fullWidth: true, leftPadding: true, topPadding: true }\n                            ]\n                        }\n                    ]\n                }\n            ]\n        },\n        {\n            group: true,\n            layout: 'row',\n            flex: 100,\n            fullHeight: true,\n            children: [\n                { flex: 30, fullWidth: true, rightPadding: true },\n                {\n                    group: true,\n                    layout: 'column',\n                    flex: 70,\n                    fullHeight: true,\n                    children: [\n                        { flex: 50, fullWidth: true, leftPadding: true, bottomPadding: true },\n                        {\n                            group: true,\n                            layout: 'row',\n                            flex: 50,\n                            fullHeight: true,\n                            children: [\n                                { flex: 50, fullWidth: true, leftPadding: true, rightPadding: true, topPadding: true },\n                                { flex: 50, fullWidth: true, leftPadding: true, topPadding: true }\n                            ]\n                        }\n                    ]\n                }\n            ]\n        },\n        {\n            group: true,\n            layout: 'column',\n            flex: 100,\n            fullHeight: true,\n            children: [\n                {\n                    group: true,\n                    layout: 'row',\n                    flex: 50,\n                    fullHeight: true,\n                    children: [\n                        { flex: 100, fullWidth: true, bottomPadding: true }\n                    ]\n                },\n                {\n                    group: true,\n                    layout: 'row',\n                    flex: 50,\n                    fullHeight: true,\n                    children: [\n                        { flex: 33, fullWidth: true, rightPadding: true, topPadding: true },\n                        { flex: 33, fullWidth: true, leftPadding: true, rightPadding: true, topPadding: true },\n                        { flex: 33, fullWidth: true, leftPadding: true, topPadding: true }\n                    ]\n                }\n            ]\n        }\n    ],\n    // 5\n    [\n        {\n            group: true,\n            layout: 'column',\n            flex: 100,\n            fullHeight: true,\n            children: [\n                {\n                    group: true,\n                    layout: 'row',\n                    flex: 50,\n                    fullHeight: true,\n                    children: [\n                        { flex: 50, fullWidth: true, rightPadding: true, bottomPadding: true },\n                        { flex: 50, fullWidth: true, leftPadding: true, bottomPadding: true }\n                    ]\n                },\n                {\n                    group: true,\n                    layout: 'row',\n                    flex: 50,\n                    fullHeight: true,\n                    children: [\n                        { flex: 33, fullWidth: true, rightPadding: true, topPadding: true },\n                        { flex: 33, fullWidth: true, leftPadding: true, rightPadding: true, topPadding: true },\n                        { flex: 33, fullWidth: true, leftPadding: true, topPadding: true }\n                    ]\n                }\n            ]\n        },\n        {\n            group: true,\n            layout: 'row',\n            flex: 100,\n            fullHeight: true,\n            children: [\n                { flex: 50, fullWidth: true, rightPadding: true },\n                {\n                    group: true,\n                    layout: 'column',\n                    flex: 50,\n                    fullHeight: true,\n                    children: [\n                        {\n                            group: true,\n                            layout: 'row',\n                            flex: 50,\n                            fullHeight: true,\n                            children: [\n                                { flex: 50, fullWidth: true, leftPadding: true, rightPadding: true, bottomPadding: true },\n                                { flex: 50, fullWidth: true, leftPadding: true, bottomPadding: true }\n                            ]\n                        },\n                        {\n                            group: true,\n                            layout: 'row',\n                            flex: 50,\n                            fullHeight: true,\n                            children: [\n                                { flex: 50, fullWidth: true, leftPadding: true, rightPadding: true, topPadding: true },\n                                { flex: 50, fullWidth: true, leftPadding: true, topPadding: true }\n                            ]\n                        }\n                    ]\n                }\n            ]\n        },\n        {\n            group: true,\n            layout: 'row',\n            flex: 100,\n            fullHeight: true,\n            children: [\n                { flex: 33, fullWidth: true, rightPadding: true },\n                {\n                    group: true,\n                    layout: 'column',\n                    flex: 67,\n                    fullHeight: true,\n                    children: [\n                        {\n                            group: true,\n                            layout: 'row',\n                            flex: 50,\n                            fullHeight: true,\n                            children: [\n                                { flex: 50, fullWidth: true, leftPadding: true, rightPadding: true, bottomPadding: true },\n                                { flex: 50, fullWidth: true, leftPadding: true, bottomPadding: true }\n                            ]\n                        },\n                        {\n                            group: true,\n                            layout: 'row',\n                            flex: 50,\n                            fullHeight: true,\n                            children: [\n                                { flex: 50, fullWidth: true, leftPadding: true, rightPadding: true, topPadding: true },\n                                { flex: 50, fullWidth: true, leftPadding: true, topPadding: true }\n                            ]\n                        }\n                    ]\n                }\n            ]\n        },\n        {\n            group: true,\n            layout: 'column',\n            flex: 100,\n            fullHeight: true,\n            children: [\n                {\n                    group: true,\n                    layout: 'row',\n                    flex: 50,\n                    fullHeight: true,\n                    children: [\n                        { flex: 100, fullWidth: true, bottomPadding: true }\n                    ]\n                },\n                {\n                    group: true,\n                    layout: 'row',\n                    flex: 50,\n                    fullHeight: true,\n                    children: [\n                        { flex: 25, fullWidth: true, rightPadding: true, topPadding: true },\n                        { flex: 25, fullWidth: true, leftPadding: true, rightPadding: true, topPadding: true },\n                        { flex: 25, fullWidth: true, leftPadding: true, rightPadding: true, topPadding: true },\n                        { flex: 25, fullWidth: true, leftPadding: true, topPadding: true }\n                    ]\n                }\n            ]\n        }\n    ],\n    // 6\n    [\n        {\n            group: true,\n            layout: 'column',\n            flex: 100,\n            fullHeight: true,\n            children: [\n                {\n                    group: true,\n                    layout: 'row',\n                    flex: 50,\n                    fullHeight: true,\n                    children: [\n                        { flex: 33, fullWidth: true, rightPadding: true, bottomPadding: true },\n                        { flex: 33, fullWidth: true, leftPadding: true, rightPadding: true, bottomPadding: true },\n                        { flex: 33, fullWidth: true, leftPadding: true, bottomPadding: true }\n                    ]\n                },\n                {\n                    group: true,\n                    layout: 'row',\n                    flex: 50,\n                    fullHeight: true,\n                    children: [\n                        { flex: 33, fullWidth: true, rightPadding: true, topPadding: true },\n                        { flex: 33, fullWidth: true, leftPadding: true, rightPadding: true, topPadding: true },\n                        { flex: 33, fullWidth: true, leftPadding: true, topPadding: true }\n                    ]\n                }\n            ]\n        },\n        {\n            group: true,\n            layout: 'column',\n            flex: 100,\n            fullHeight: true,\n            children: [\n                {\n                    group: true,\n                    layout: 'row',\n                    flex: 50,\n                    fullHeight: true,\n                    children: [\n                        { flex: 50, fullWidth: true, rightPadding: true, bottomPadding: true },\n                        { flex: 25, fullWidth: true, leftPadding: true, rightPadding: true, bottomPadding: true },\n                        { flex: 25, fullWidth: true, leftPadding: true, bottomPadding: true }\n                    ]\n                },\n                {\n                    group: true,\n                    layout: 'row',\n                    flex: 50,\n                    fullHeight: true,\n                    children: [\n                        { flex: 50, fullWidth: true, rightPadding: true, topPadding: true },\n                        { flex: 25, fullWidth: true, leftPadding: true, rightPadding: true, topPadding: true },\n                        { flex: 25, fullWidth: true, leftPadding: true, topPadding: true }\n                    ]\n                }\n            ]\n        },\n        {\n            group: true,\n            layout: 'row',\n            flex: 100,\n            fullHeight: true,\n            children: [\n                { flex: 33, fullWidth: true, rightPadding: true },\n                {\n                    group: true,\n                    layout: 'column',\n                    flex: 67,\n                    fullHeight: true,\n                    children: [\n                        {\n                            group: true,\n                            layout: 'row',\n                            flex: 50,\n                            fullHeight: true,\n                            children: [\n                                { flex: 50, fullWidth: true, leftPadding: true, rightPadding: true, bottomPadding: true },\n                                { flex: 50, fullWidth: true, leftPadding: true, bottomPadding: true }\n                            ]\n                        },\n                        {\n                            group: true,\n                            layout: 'row',\n                            flex: 50,\n                            fullHeight: true,\n                            children: [\n                                { flex: 33, fullWidth: true, leftPadding: true, rightPadding: true, topPadding: true },\n                                { flex: 33, fullWidth: true, leftPadding: true, rightPadding: true, topPadding: true },\n                                { flex: 33, fullWidth: true, leftPadding: true, topPadding: true }\n                            ]\n                        }\n                    ]\n                }\n            ]\n        },\n        {\n            group: true,\n            layout: 'column',\n            flex: 100,\n            fullHeight: true,\n            children: [\n                {\n                    group: true,\n                    layout: 'row',\n                    flex: 50,\n                    fullHeight: true,\n                    children: [\n                        { flex: 50, fullWidth: true, rightPadding: true, bottomPadding: true },\n                        { flex: 50, fullWidth: true, leftPadding: true, bottomPadding: true }\n                    ]\n                },\n                {\n                    group: true,\n                    layout: 'row',\n                    flex: 50,\n                    fullHeight: true,\n                    children: [\n                        { flex: 25, fullWidth: true, rightPadding: true, topPadding: true },\n                        { flex: 25, fullWidth: true, leftPadding: true, rightPadding: true, topPadding: true },\n                        { flex: 25, fullWidth: true, leftPadding: true, rightPadding: true, topPadding: true },\n                        { flex: 25, fullWidth: true, leftPadding: true, topPadding: true }\n                    ]\n                }\n            ]\n        }\n    ],\n    // 7\n    [\n        {\n            group: true,\n            layout: 'column',\n            flex: 100,\n            fullHeight: true,\n            children: [\n                {\n                    group: true,\n                    layout: 'row',\n                    flex: 50,\n                    fullHeight: true,\n                    children: [\n                        { flex: 33, fullWidth: true, rightPadding: true, bottomPadding: true },\n                        { flex: 33, fullWidth: true, leftPadding: true, rightPadding: true, bottomPadding: true },\n                        { flex: 33, fullWidth: true, leftPadding: true, bottomPadding: true }\n                    ]\n                },\n                {\n                    group: true,\n                    layout: 'row',\n                    flex: 50,\n                    fullHeight: true,\n                    children: [\n                        { flex: 25, fullWidth: true, rightPadding: true, topPadding: true },\n                        { flex: 25, fullWidth: true, leftPadding: true, rightPadding: true, topPadding: true },\n                        { flex: 25, fullWidth: true, leftPadding: true, rightPadding: true, topPadding: true },\n                        { flex: 25, fullWidth: true, leftPadding: true, topPadding: true }\n                    ]\n                }\n            ]\n        },\n        {\n            group: true,\n            layout: 'column',\n            flex: 100,\n            fullHeight: true,\n            children: [\n                {\n                    group: true,\n                    layout: 'row',\n                    flex: 50,\n                    fullHeight: true,\n                    children: [\n                        { flex: 50, fullWidth: true, rightPadding: true, bottomPadding: true },\n                        { flex: 25, fullWidth: true, leftPadding: true, rightPadding: true, bottomPadding: true },\n                        { flex: 25, fullWidth: true, leftPadding: true, bottomPadding: true }\n                    ]\n                },\n                {\n                    group: true,\n                    layout: 'row',\n                    flex: 50,\n                    fullHeight: true,\n                    children: [\n                        { flex: 25, fullWidth: true, rightPadding: true, topPadding: true },\n                        { flex: 25, fullWidth: true, leftPadding: true, rightPadding: true, topPadding: true },\n                        { flex: 25, fullWidth: true, leftPadding: true, rightPadding: true, topPadding: true },\n                        { flex: 25, fullWidth: true, leftPadding: true, topPadding: true }\n                    ]\n                }\n            ]\n        },\n        {\n            group: true,\n            layout: 'row',\n            flex: 100,\n            fullHeight: true,\n            children: [\n                { flex: 25, fullWidth: true, rightPadding: true },\n                {\n                    group: true,\n                    layout: 'column',\n                    flex: 75,\n                    fullHeight: true,\n                    children: [\n                        {\n                            group: true,\n                            layout: 'row',\n                            flex: 50,\n                            fullHeight: true,\n                            children: [\n                                { flex: 33, fullWidth: true, leftPadding: true, rightPadding: true, bottomPadding: true },\n                                { flex: 33, fullWidth: true, leftPadding: true, rightPadding: true, bottomPadding: true },\n                                { flex: 33, fullWidth: true, leftPadding: true, bottomPadding: true }\n                            ]\n                        },\n                        {\n                            group: true,\n                            layout: 'row',\n                            flex: 50,\n                            fullHeight: true,\n                            children: [\n                                { flex: 33, fullWidth: true, leftPadding: true, rightPadding: true, topPadding: true },\n                                { flex: 33, fullWidth: true, leftPadding: true, rightPadding: true, topPadding: true },\n                                { flex: 33, fullWidth: true, leftPadding: true, topPadding: true }\n                            ]\n                        }\n                    ]\n                }\n            ]\n        }\n    ],\n    // 8\n    [\n        {\n            group: true,\n            layout: 'column',\n            flex: 100,\n            fullHeight: true,\n            fullWidth: true,\n            children: [\n                {\n                    group: true,\n                    layout: 'row',\n                    flex: 50,\n                    fullWidth: true,\n                    children: [\n                        { flex: 25, fullWidth: true, rightPadding: true, bottomPadding: true },\n                        { flex: 25, fullWidth: true, leftPadding: true, rightPadding: true, bottomPadding: true },\n                        { flex: 25, fullWidth: true, leftPadding: true, rightPadding: true, bottomPadding: true },\n                        { flex: 25, fullWidth: true, leftPadding: true, bottomPadding: true }\n                    ]\n                },\n                {\n                    group: true,\n                    layout: 'row',\n                    flex: 50,\n                    fullWidth: true,\n                    children: [\n                        { flex: 25, fullWidth: true, rightPadding: true, topPadding: true },\n                        { flex: 25, fullWidth: true, leftPadding: true, rightPadding: true, topPadding: true },\n                        { flex: 25, fullWidth: true, leftPadding: true, rightPadding: true, topPadding: true },\n                        { flex: 25, fullWidth: true, leftPadding: true, topPadding: true }\n                    ]\n                }\n            ]\n        }\n    ]\n];\n\nclass PictureUtils implements IPictureUtilsService {\n\n    constructor() {\n        \"ngInject\";\n    }\n\n    public getCollageSchemes(): any {\n        return collageSchemes;\n    }\n\n    public setErrorImageCSS(image: any, params?: imageCssParams): void {\n        let cssParams: imageCssParams = {\n            'width': '',\n            'margin-left': '',\n            'height': '',\n            'margin-top': ''\n        };\n\n        if (params) {\n            cssParams = _.assign(cssParams, params);\n        }\n        if (image) {\n            image.css(cssParams);\n        }\n    }\n\n    public setImageMarginCSS($element: any, image: any, params?: imageCssParams): void {\n        let containerWidth: number = $element.width ? $element.width() : $element.clientWidth;\n        let containerHeight: number = $element.height ? $element.height() : $element.clientHeight;\n        let imageWidth: number = image[0].naturalWidth || image.width;\n        let imageHeight: number = image[0].naturalHeight || image.height;\n        let margin: number = 0;\n        let cssParams: imageCssParams = {};\n\n        if ((imageWidth / containerWidth) > (imageHeight / containerHeight)) {\n            margin = -((imageWidth / imageHeight * containerHeight - containerWidth) / 2);\n            cssParams['margin-left'] = '' + margin + 'px';\n            cssParams['height'] = '' + containerHeight + 'px';\n            cssParams['width'] = '' + imageWidth * containerHeight / imageHeight + 'px';\n            cssParams['margin-top'] = '';\n        } else {\n            margin = -((imageHeight / imageWidth * containerWidth - containerHeight) / 2);\n            cssParams['margin-top'] = '' + margin + 'px';\n            cssParams['height'] = '' + imageHeight * containerWidth / imageWidth + 'px';\n            cssParams['width'] = '' + containerWidth + 'px';\n            cssParams['margin-left'] = '';\n        }\n\n        if (params) {\n            cssParams = _.assign(cssParams, params);\n        }\n\n        image.css(cssParams);\n    }\n\n    public setIconMarginCSS(container: any, icon: any): void {\n        let containerWidth: number = container.clientWidth ? container.clientWidth : container.width;\n        let containerHeight: number = container.clientHeight ? container.clientHeight : container.height;\n        let margin: number = 0;\n        let iconSize: number = containerWidth > containerHeight ? containerHeight : containerWidth;\n\n        var cssParams: imageCssParams = {\n            'width': '' + iconSize + 'px',\n            'margin-left': '',\n            'height': '' + iconSize + 'px',\n            'margin-top': ''\n        };\n\n        if ((containerWidth) > (containerHeight)) {\n            margin = ((containerWidth - containerHeight) / 2);\n            cssParams['margin-left'] = '' + margin + 'px';\n        } else {\n            margin = ((containerHeight - containerWidth) / 2);\n            cssParams['margin-top'] = '' + margin + 'px';\n        }\n\n        icon.css(cssParams);\n    }\n\n}\n\nclass PictureUtilsProvider implements IPictureUtilsProvider {\n    private _service: IPictureUtilsService;\n\n    constructor() { }\n\n    public $get() {\n        \"ngInject\";\n\n        if (this._service == null) {\n            this._service = new PictureUtils();\n        }\n\n        return this._service;\n    }\n}\n\nangular\n    .module('pipPictureUtils', [])\n    .provider('pipPictureUtils', PictureUtilsProvider);\n\n","import './IPictureUtils';\nimport './PictureUtils';\nimport './PicturePaste';\n\nexport * from './IPictureUtils';\nexport * from './PicturePaste';","(function(module) {\ntry {\n  module = angular.module('pipPictures.Templates');\n} catch (e) {\n  module = angular.module('pipPictures.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('add_image/AddImage.html',\n    '<md-menu><ng-transclude class=\"pip-add-image-open-button\" ng-click=\"vm.openMenu($mdOpenMenu)\" xxxng-click=\"vm.ngDisabled() ? \\'\\' : $mdOpenMenu()\"></ng-transclude><md-menu-content width=\"4\"><md-menu-item ng-if=\"vm.option.Upload\"><md-button class=\"layout-row layout-align-start-center\" accept=\"image/*\" ng-keydown=\"vm.onKeyDown($event)\" ng-multiple=\"vm.isMulti()\" ng-file-select=\"\" ng-file-change=\"vm.onFileChange($files)\" ng-click=\"vm.hideMenu()\" ng-file-drop=\"\"><md-icon class=\"text-headline text-grey rm24-flex\" md-svg-icon=\"icons:folder\"></md-icon><span class=\"text-grey\">{{ ::\\'FILE\\' | translate }}</span></md-button></md-menu-item><md-menu-item ng-if=\"vm.option.WebLink\"><md-button class=\"layout-row layout-align-start-center\" ng-click=\"vm.onWebLinkClick()\"><md-icon class=\"text-headline text-grey rm24-flex\" md-svg-icon=\"icons:weblink\"></md-icon><span class=\"text-grey\">{{ ::\\'WEB_LINK\\' | translate }}</span></md-button></md-menu-item><md-menu-item ng-if=\"vm.option.Camera\"><md-button class=\"layout-row layout-align-start-center\" ng-click=\"vm.onCameraClick()\"><md-icon class=\"text-headline text-grey rm24-flex\" md-svg-icon=\"icons:camera\"></md-icon><span class=\"text-grey\">{{ ::\\'CAMERA\\' | translate }}</span></md-button></md-menu-item><md-menu-item ng-if=\"vm.option.Galery\"><md-button class=\"layout-row layout-align-start-center\" ng-click=\"vm.onGalleryClick()\"><md-icon class=\"text-headline text-grey rm24-flex\" md-svg-icon=\"icons:images\"></md-icon><span class=\"text-grey\">{{ ::\\'IMAGE_GALLERY\\' | translate }}</span></md-button></md-menu-item></md-menu-content></md-menu>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipPictures.Templates');\n} catch (e) {\n  module = angular.module('pipPictures.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('camera_dialog/CameraDialog.html',\n    '<md-dialog class=\"pip-dialog pip-picture-dialog pip-camera-dialog layout-column\" md-theme=\"{{$ctrl.theme}}\" ng-show=\"$ctrl.browser != \\'android\\'\" ng-class=\"{\\'pip-android-dialog\\': $ctrl.browser == \\'android\\' || !$ctrl.browser}\"><div class=\"pip-header\"><md-button ng-click=\"$ctrl.onCancelClick()\" class=\"md-icon-button\" aria-label=\"{{ ::\\'CANCEL\\' | translate }}\"><md-icon class=\"text-grey\" md-svg-icon=\"icons:arrow-left\"></md-icon></md-button><h3 class=\"m0 text-title\">{{ ::\\'TAKE_PICTURE\\' | translate }}</h3></div><div class=\"pip-body\"><div class=\"camera-stream\" ng-hide=\"$ctrl.webCamError || $ctrl.browser == \\'android\\'\"></div><div class=\"camera-error\" ng-show=\"$ctrl.webCamError || $ctrl.browser == \\'android\\'\"><span>{{ ::\\'WEB_CAM_ERROR\\' | translate }}</span></div></div><div class=\"pip-footer\"><div class=\"w48\"><md-button ng-click=\"$ctrl.onResetPicture()\" ng-hide=\"!$ctrl.freeze || $ctrl.webCamError\" class=\"md-icon-button\" ng-disabled=\"transaction.busy()\" aria-label=\"{{ ::\\'REMOVE_PICTURE\\' | translate }}\"><md-icon class=\"text-grey\" md-svg-icon=\"icons:refresh\"></md-icon></md-button></div><div class=\"flex\"></div><div class=\"w48\"><md-button ng-click=\"$ctrl.onTakePictureClick()\" ng-hide=\"$ctrl.webCamError\" class=\"md-icon-button\" aria-label=\"{{ ::\\'TAKE_PICTURE\\' | translate }}\"><md-icon class=\"text-grey icon-button\" md-svg-icon=\"icons:{{$ctrl.freeze ? \\'check\\' : \\'camera\\'}}\"></md-icon></md-button></div><div class=\"flex\"></div><div class=\"w48\"><md-button ng-click=\"$ctrl.onCancelClick()\" class=\"md-icon-button\" aria-label=\"{{ ::\\'CANCEL\\' | translate }}\"><md-icon class=\"text-grey\" md-svg-icon=\"icons:cross\"></md-icon></md-button></div></div></md-dialog>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipPictures.Templates');\n} catch (e) {\n  module = angular.module('pipPictures.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('gallery_search_dialog/GallerySearchDialog.html',\n    '<md-dialog class=\"pip-dialog pip-gallery-search-dialog pip-picture-dialog layout-column\" md-theme=\"{{ $ctrl.theme }}\"><md-progress-linear ng-show=\"$ctrl.transaction.busy()\" md-mode=\"indeterminate\"></md-progress-linear><md-dialog-content class=\"pip-body lp0 rp0 tp0 pip-scroll flex layout-row\"><div class=\"layout-column layout-align-start-start flex\"><div class=\"pip-header w-stretch layout-column layout-align-start-start\"><h3 class=\"w-stretch text-title m0 bp8\"><md-button class=\"md-icon-button m0\" ng-click=\"$ctrl.onCancelClick()\" aria-label=\"{{ ::\\'CANCEL\\' | translate }}\"><md-icon class=\"text-grey\" md-svg-icon=\"icons:arrow-left\"></md-icon></md-button>{{ ::\\'IMAGE_GALLERY\\' | translate }}</h3><div class=\"w-stretch divider-bottom layout-row layout-start-center\"><input class=\"no-divider rm8 text-subhead1 flex\" ng-disabled=\"$ctrl.transaction.busy()\" ng-model=\"$ctrl.search\" ng-keypress=\"$ctrl.onKeyPress($event)\" placeholder=\"{{ ::\\'SEARCH_PICTURES\\' | translate }}\" type=\"text\" tabindex=\"1\"><md-button class=\"md-icon-button md-icon-button-square p0 pip-search-button md-primary\" ng-click=\"$ctrl.onSearchClick()\" ng-hide=\"$ctrl.optionDefault\" tabindex=\"-1\" aria-label=\"SEARCH\"><md-icon class=\"text-opacity md-primary\" md-svg-icon=\"icons:search-square\"></md-icon></md-button></div></div><div class=\"pip-content flex\" ng-show=\"$ctrl.imagesSearchResult.length > 0\"><div class=\"pip-image-container\" ng-click=\"$ctrl.onImageClick(image)\" ng-repeat=\"image in $ctrl.imagesSearchResult track by $index\" ng-class=\"{\\'checked\\': image.checked}\" tabindex=\"{{ $index + 2 }}\"><pip-picture pip-src=\"image.thumbnail\" pip-default-icon=\"icon-images\" pip-rebind=\"true\"></pip-picture><div class=\"pip-checked-cover\"></div><div class=\"pip-checkbox-backdrop\"><md-checkbox md-no-ink=\"\" ng-model=\"image.checked\" ng-click=\"image.checked = !image.checked\" aria-label=\"CHECKED\"></md-checkbox></div></div></div><div class=\"pip-no-images w-stretch layout-column layout-align-center-center flex\" ng-show=\"$ctrl.imagesSearchResult.length == 0\"><img src=\"images/add_from_image_library.svg\" width=\"200\" height=\"200\"><p class=\"text-secondary opacity-secondary text-center\">{{ ::\\'IMAGE_START_SEARCH\\' | translate }}</p></div></div></md-dialog-content><div class=\"pip-footer\"><md-button ng-click=\"$ctrl.onCancelClick()\" ng-hide=\"$ctrl.transaction.busy()\" aria-label=\"{{ ::\\'CANCEL\\' | translate }}\" tabindex=\"{{ $ctrl.imagesSearchResult.length + 3 }}\"><span class=\"text-grey\">{{ ::\\'CANCEL\\' | translate }}</span></md-button><md-button ng-if=\"transaction.busy()\" ng-click=\"$ctrl.onStopSearchClick()\" class=\"md-raised md-warn m0\" tabindex=\"5\" aria-label=\"ABORT\" pip-test=\"button-cancel\">{{ ::\\'CANCEL\\' | translate }}</md-button><md-button class=\"md-accent\" ng-hide=\"$ctrl.transaction.busy()\" ng-disabled=\"$ctrl.addButtonDisabled()\" ng-click=\"$ctrl.onAddClick()\" aria-label=\"{{ ::\\'ADD\\' | translate }}\" tabindex=\"{{ $ctrl.imagesSearchResult.length + 4 }}\">{{ ::\\'ADD\\' | translate }}</md-button></div></md-dialog>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipPictures.Templates');\n} catch (e) {\n  module = angular.module('pipPictures.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('picture_edit/PictureEdit.html',\n    '<div class=\"pip-picture-upload pip-picture-drop md-focused\" ng-keydown=\"$ctrl.onKeyDown($event)\" ng-class=\"{\\'pip-picture-error\\': $ctrl.control.state == \\'error\\'}\" tabindex=\"{{ $ctrl.ngDisabled || $ctrl.control.uploading ? -1 : 0 }}\" pip-changed=\"$ctrl.readItemLocally(url, uriData, file, picture)\" ng-disabled=\"$ctrl.ngDisabled\" pip-multi=\"$ctrl.multiUpload\" ng-focus=\"$ctrl.onFocus()\" ng-blur=\"$ctrl.onBlur()\" pip-option=\"$ctrl.option\" pip-add-image=\"\"><div class=\"pip-default-icon\" ng-show=\"$ctrl.empty() || $ctrl.control.state == \\'error\\'\"><md-icon class=\"pip-picture-icon\" md-svg-icon=\"icons:{{ $ctrl.icon }}\"></md-icon></div><div class=\"pip-default-text\" ng-show=\"$ctrl.control.state == \\'error\\'\"><span>{{ $ctrl.errorText | translate }}</span></div><div class=\"pip-default-text\" ng-show=\"$ctrl.empty() && $ctrl.control.state != \\'error\\'\"><span>{{ $ctrl.text | translate }}</span></div><img class=\"pip-picture-image\" ng-src=\"{{ $ctrl.control.url }}\" ng-show=\"!$ctrl.empty() && $ctrl.control.state != \\'error\\'\" ng-class=\"{ \\'pip-image-new\\': $ctrl.isUpdated(), \\'cursor-default\\' : $ctrl.ngDisabled || $ctrl.control.uploading }\" ui-event=\"{ error: \\'$ctrl.onImageError($event)\\', load: \\'$ctrl.onImageLoad($event)\\' }\"><md-button class=\"md-icon-button\" ng-click=\"$ctrl.onDeleteClick($event)\" tabindex=\"-1\" aria-label=\"delete\" ng-hide=\"$ctrl.empty() || $ctrl.ngDisabled\" ng-disabled=\"$ctrl.ngDisabled || $ctrl.control.uploading\"><md-icon md-svg-icon=\"icons:cross\"></md-icon></md-button><md-progress-linear ng-show=\"$ctrl.control.uploading\" ng-value=\"$ctrl.control.progress\"></md-progress-linear></div>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipPictures.Templates');\n} catch (e) {\n  module = angular.module('pipPictures.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('picture_list_edit/PictureListEdit.html',\n    '<div pip-focused=\"\"><div class=\"pip-picture-upload pointer pip-focusable\" ng-class=\"{\\'pip-picture-error\\': item.state == \\'error\\'}\" ng-keydown=\"$ctrl.onKeyDown($event, item)\" tabindex=\"{{ $ctrl.ngDisabled ? -1 : 0 }}\" ng-repeat=\"item in $ctrl.control.items | filter: $ctrl.filterItem\"><div class=\"pip-default-icon\" ng-hide=\"item.loaded || item.state == \\'error\\'\"><md-icon pip-cancel-drag=\"true\" class=\"pip-picture-icon\" md-svg-icon=\"icons:{{ $ctrl.icon }}\"></md-icon></div><div class=\"pip-default-text\" ng-show=\"$ctrl.control.state == \\'error\\'\"><span>{{ $ctrl.errorText | translate }}</span></div><img ng-src=\"{{ ::item.url }}\" pip-cancel-drag=\"true\" ng-hide=\"item.state == \\'error\\'\" ng-class=\"{ \\'pip-image-new\\': item.state == \\'added\\' }\" ui-event=\"{ error: \\'$ctrl.onImageError($event, item)\\', load: \\'$ctrl.onImageLoad($event, item)\\' }\"><md-button ng-click=\"$ctrl.onDeleteClick(item)\" ng-hide=\"$ctrl.ngDisabled || $ctrl.control.uploading\" ng-disabled=\"$ctrl.ngDisabled || $ctrl.control.uploading\" tabindex=\"-1\" aria-label=\"delete\" class=\"md-icon-button\"><md-icon pip-cancel-drag=\"true\" md-svg-icon=\"icons:cross\"></md-icon></md-button><md-progress-linear md-mode=\"indeterminate\" ng-show=\"item.uploading\" value=\"{{ item.progress }}\"></md-progress-linear></div><button class=\"pip-picture-upload pip-picture-drop pip-focusable\" pip-add-image=\"\" pip-multi=\"true\" ng-focus=\"$ctrl.onFocus()\" ng-blur=\"$ctrl.onBlur()\" pip-changed=\"$ctrl.readItemLocally(url, uriData, file, picture)\" ng-disabled=\"$ctrl.ngDisabled || $ctrl.control.uploading\"><div class=\"pip-default-icon\"><md-icon pip-cancel-drag=\"true\" class=\"pip-picture-icon\" md-svg-icon=\"icons:{{ $ctrl.icon }}\"></md-icon></div><div class=\"pip-default-text\"><span>{{ $ctrl.text | translate }}</span></div></button><div class=\"clearfix\"></div></div>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipPictures.Templates');\n} catch (e) {\n  module = angular.module('pipPictures.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('picture_url_dialog/PictureUrlDialog.html',\n    '<md-dialog class=\"pip-dialog pip-picture-url-dialog pip-picture-dialog layout-column\" md-theme=\"{{ $ctrl.theme }}\"><md-dialog-content class=\"pip-body lp0 rp0 tp0 pip-scroll\"><div class=\"pip-header bm16 layout-row layout-align-start-center\"><md-button ng-click=\"$ctrl.onCancelClick()\" class=\"md-icon-button lm0\" aria-label=\"{{ ::\\'CANCEL\\' | translate }}\"><md-icon class=\"text-grey\" md-svg-icon=\"icons:arrow-left\"></md-icon></md-button><h3 class=\"text-title m0\">{{ ::\\'PICTURE_FROM_WEBLINK\\' | translate}}</h3></div><div class=\"pip-content lm6 rm16\"><md-input-container md-no-float=\"\" class=\"w-stretch text-subhead1\"><input type=\"text\" ng-model=\"$ctrl.url\" ng-change=\"$ctrl.checkUrl()\" placeholder=\"{{ ::\\'LINK_PICTURE\\' | translate }}\"></md-input-container><div class=\"w-stretch layout-row layout-align-center-center\" ng-hide=\"$ctrl.invalid\"><img id=\"url_image\"></div><div class=\"pip-no-images layout-row layout-align-center-center\" ng-show=\"$ctrl.invalid\"><md-icon class=\"text-grey\" md-svg-icon=\"icons:images\"></md-icon></div></div></md-dialog-content><div class=\"pip-footer\"><md-button ng-click=\"$ctrl.onCancelClick()\" aria-label=\"{{ ::\\'CANCEL\\' | translate }}\">{{ ::\\'CANCEL\\' | translate }}</md-button><md-button class=\"md-accent\" ng-click=\"$ctrl.onAddClick()\" ng-disabled=\"$ctrl.invalid\" aria-label=\"{{ ::\\'ADD\\' | translate }}\">{{ ::\\'ADD\\' | translate }}</md-button></div></md-dialog>');\n}]);\n})();\n\n//# sourceMappingURL=pip-suite-pictures-html.min.js.map\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}